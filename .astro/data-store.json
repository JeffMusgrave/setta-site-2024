[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","content-config-digest","a5f459d4b98bc076","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://setta.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"introducing-setta",{"id":11,"data":13,"body":28,"filePath":29,"assetImports":30,"digest":36,"rendered":37,"legacyId":87},{"title":14,"description":15,"date":16,"author":17,"tags":18,"featuredImage":24,"hideFeaturedImageInPost":27,"draft":27},"Introducing Setta: Effortless Python Configuration & User Interfaces","We're excited to announce the launch of Setta, an open-source tool that lets you expose Python functions as flexible UIs without writing boilerplate parsers or frontend code.",["Date","2024-02-28T00:00:00.000Z"],"Setta Team",[19,20,21,22,23],"launch","python","configuration","ui","developer-tools",{"src":25,"alt":26},"setta-project.png","Setta interface showing Python configuration UI",false,"## No More Donkeywork!\n\nWe’re excited to launch **Setta**, a **general purpose, open-source tool for Python** by [Kevin Musgrave](https://github.com/KevinMusgrave) and [Jeff Musgrave](https://github.com/JeffMusgrave). It reimagines how you handle Python configurations and user interfaces while eliminating complexity that comes with existing solutions. So, go ahead, you can delete your YAML parsers, configuration files, _and_ frontend code!\n\n## What Is Setta?\n\nSetta is a developer tool that **unifies Python configuration and UI.** Instead of scattering config files and building custom frontends, you can:\n\n- **Expose Python functions as interactive UIs** Just type in the name of your function from your codebase – No frontend code required!\n- **Eliminate boilerplate parsers**—no more YAML or JSON for your configs\n- **Share and configure easily**—everyone from engineers to non-technical users can tweak parameters in a friendly interface\n\nWhether you’re tuning large AI models or writing a simple script, Setta turns your Python code into an interactive application with minimal overhead.\n\n## Try It First!\n\nWant to try it now, instead of reading the rest of this blog post? See our [Getting Started guide](https://github.com/settadev/setta?tab=readme-ov-file#getting-started), or check out our [example projects](https://github.com/settadev/examples). They're easy to run!\n\n### [Stream Diffusion Image-to-Image](https://github.com/settadev/examples/tree/main/stream_diffusion_img_to_img)\n\nSketch in real time to generate AI-enhanced images.\n\n[![Stream Diffusion with Setta](stream-diffusion-setta.png)](https://github.com/settadev/examples/tree/main/stream_diffusion_img_to_img)\n\n---\n\n### [Hugging Face TRL Language Model Finetuning](https://github.com/settadev/examples/tree/main/trl_language_model_finetuning)\n\nExperiment with Hugging Face TRL training configurations.\n\n[![Hugging Face TRL Fine Tuning](trl-hugging-face-setta.png)](https://github.com/settadev/examples/tree/main/trl_language_model_finetuning)\n\n---\n\n### [Llama 3 Chat UI powered by the Groq API](https://github.com/settadev/examples/tree/main/groq_api_chat)\n\nCustom chat UIs are made easy with Setta! In this example we take a look at how you can quickly transform a small python script into a useable Chat UI powered by Groq and Llama 3.\n\n[![Llama 3 Chat UI built in Setta, powered by Groq](groq-llama3-setta.png)](https://github.com/settadev/examples/tree/main/groq_api_chat)\n\n---\n\n### [Transformers Sequence Classification](https://github.com/settadev/examples/tree/main/transformers_trainer)\n\nTrain text classifiers with minimal setup.\n\n[![Hugging Face's Transformers Library in Setta](transformers-hugging-face-setta.png)](https://github.com/settadev/examples/tree/main/transformers_trainer)\n\n---\n\n### [PyTorch Metric Learning](https://github.com/settadev/examples/tree/main/pytorch_metric_learning_trainer)\n\nFinetune embeddings using various metric learning methods.\n\n[![PML or Pytorch Metric Learning configuration UI inside of Setta](pytorch-metric-learning-setta.png)](https://github.com/settadev/examples/tree/main/pytorch_metric_learning_trainer)\n\n## Why Setta Is Betta\n\nTraditional workflows involve writing Python functions, creating separate config files, building parsers, and making (or remaking) a frontend when parameters change. Setta merges configuration and UI in one place. Simply right click and add a card in Setta, type your function’s name, and all its arguments will appear. Set interface elements like sliders, color pickers, or switches for each parameter to your heart’s content!\n\n## What Setta Is _Not_\n\n- **Not a WYSIWYG Web Builder**: Setta won’t generate custom HTML pages or pixel-perfect UIs. It produces standardized, interactive components inside its own interface.\n- **Not a Visual Programming System**: You still write regular Python. Setta just provides a streamlined UI so you and other users can interact with your functions without wrestling with frontend code or config files.\n\n## How Setta Empowers Developers and Users\n\n- **Unified Configuration and UI**: Config and frontend tools solve parts of the puzzle while adding complexity. Setta treats your config and UI as one, while eliminating the config and UI code complexity entirely.\n- **Rich, Interactive Experiences**: Insert markdown docs, tooltips, or YouTube videos so users can learn as they go—no diving into separate READMEs.\n- **Flexible Usability**: Hide less-used functions to keep the UI clean. We’ve also got upcoming features like meta controls and user modes that will further simplify the interface for different audiences.\n- **Effortless Sharing**: Hand off your project to anyone; they can explore the UI and learn what they need, without constant help from you.\n\n## What’s Next?\n\nWe're actively developing Setta with new features and improvements. In our latest releases, we've added:\n\n- Support for chat interfaces through a new \"Chat\" section type\n- Artifact management improvements\n- Bug fixes compatibility\n\nAnd there's a whole lot more on the way!\n\n## Join the Setta Community\n\n- Check out our [documentation](https:docs.setta.dev)\n- Join our [Discord community](https://discord.gg/MmHJz75bZ5)\n- Star us on [GitHub](https://github.com/settadev/setta)\n- Try our [example projects](https://github.com/settadev/examples)\n- Follow us on [X](https://x.com/settadev)","src/content/blog/introducing-setta/index.md",[31,32,33,34,35],"stream-diffusion-setta.png","trl-hugging-face-setta.png","groq-llama3-setta.png","transformers-hugging-face-setta.png","pytorch-metric-learning-setta.png","ac89ecf3f3df1ba1",{"html":38,"metadata":39},"\u003Ch2 id=\"no-more-donkeywork\">No More Donkeywork!\u003C/h2>\n\u003Cp>We’re excited to launch \u003Cstrong>Setta\u003C/strong>, a \u003Cstrong>general purpose, open-source tool for Python\u003C/strong> by \u003Ca href=\"https://github.com/KevinMusgrave\">Kevin Musgrave\u003C/a> and \u003Ca href=\"https://github.com/JeffMusgrave\">Jeff Musgrave\u003C/a>. It reimagines how you handle Python configurations and user interfaces while eliminating complexity that comes with existing solutions. So, go ahead, you can delete your YAML parsers, configuration files, \u003Cem>and\u003C/em> frontend code!\u003C/p>\n\u003Ch2 id=\"what-is-setta\">What Is Setta?\u003C/h2>\n\u003Cp>Setta is a developer tool that \u003Cstrong>unifies Python configuration and UI.\u003C/strong> Instead of scattering config files and building custom frontends, you can:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Expose Python functions as interactive UIs\u003C/strong> Just type in the name of your function from your codebase – No frontend code required!\u003C/li>\n\u003Cli>\u003Cstrong>Eliminate boilerplate parsers\u003C/strong>—no more YAML or JSON for your configs\u003C/li>\n\u003Cli>\u003Cstrong>Share and configure easily\u003C/strong>—everyone from engineers to non-technical users can tweak parameters in a friendly interface\u003C/li>\n\u003C/ul>\n\u003Cp>Whether you’re tuning large AI models or writing a simple script, Setta turns your Python code into an interactive application with minimal overhead.\u003C/p>\n\u003Ch2 id=\"try-it-first\">Try It First!\u003C/h2>\n\u003Cp>Want to try it now, instead of reading the rest of this blog post? See our \u003Ca href=\"https://github.com/settadev/setta?tab=readme-ov-file#getting-started\">Getting Started guide\u003C/a>, or check out our \u003Ca href=\"https://github.com/settadev/examples\">example projects\u003C/a>. They’re easy to run!\u003C/p>\n\u003Ch3 id=\"stream-diffusion-image-to-image\">\u003Ca href=\"https://github.com/settadev/examples/tree/main/stream_diffusion_img_to_img\">Stream Diffusion Image-to-Image\u003C/a>\u003C/h3>\n\u003Cp>Sketch in real time to generate AI-enhanced images.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/settadev/examples/tree/main/stream_diffusion_img_to_img\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;stream-diffusion-setta.png&#x22;,&#x22;alt&#x22;:&#x22;Stream Diffusion with Setta&#x22;,&#x22;index&#x22;:0}\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"hugging-face-trl-language-model-finetuning\">\u003Ca href=\"https://github.com/settadev/examples/tree/main/trl_language_model_finetuning\">Hugging Face TRL Language Model Finetuning\u003C/a>\u003C/h3>\n\u003Cp>Experiment with Hugging Face TRL training configurations.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/settadev/examples/tree/main/trl_language_model_finetuning\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;trl-hugging-face-setta.png&#x22;,&#x22;alt&#x22;:&#x22;Hugging Face TRL Fine Tuning&#x22;,&#x22;index&#x22;:0}\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"llama-3-chat-ui-powered-by-the-groq-api\">\u003Ca href=\"https://github.com/settadev/examples/tree/main/groq_api_chat\">Llama 3 Chat UI powered by the Groq API\u003C/a>\u003C/h3>\n\u003Cp>Custom chat UIs are made easy with Setta! In this example we take a look at how you can quickly transform a small python script into a useable Chat UI powered by Groq and Llama 3.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/settadev/examples/tree/main/groq_api_chat\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;groq-llama3-setta.png&#x22;,&#x22;alt&#x22;:&#x22;Llama 3 Chat UI built in Setta, powered by Groq&#x22;,&#x22;index&#x22;:0}\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"transformers-sequence-classification\">\u003Ca href=\"https://github.com/settadev/examples/tree/main/transformers_trainer\">Transformers Sequence Classification\u003C/a>\u003C/h3>\n\u003Cp>Train text classifiers with minimal setup.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/settadev/examples/tree/main/transformers_trainer\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;transformers-hugging-face-setta.png&#x22;,&#x22;alt&#x22;:&#x22;Hugging Face&#x27;s Transformers Library in Setta&#x22;,&#x22;index&#x22;:0}\">\u003C/a>\u003C/p>\n\u003Chr>\n\u003Ch3 id=\"pytorch-metric-learning\">\u003Ca href=\"https://github.com/settadev/examples/tree/main/pytorch_metric_learning_trainer\">PyTorch Metric Learning\u003C/a>\u003C/h3>\n\u003Cp>Finetune embeddings using various metric learning methods.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/settadev/examples/tree/main/pytorch_metric_learning_trainer\">\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;pytorch-metric-learning-setta.png&#x22;,&#x22;alt&#x22;:&#x22;PML or Pytorch Metric Learning configuration UI inside of Setta&#x22;,&#x22;index&#x22;:0}\">\u003C/a>\u003C/p>\n\u003Ch2 id=\"why-setta-is-betta\">Why Setta Is Betta\u003C/h2>\n\u003Cp>Traditional workflows involve writing Python functions, creating separate config files, building parsers, and making (or remaking) a frontend when parameters change. Setta merges configuration and UI in one place. Simply right click and add a card in Setta, type your function’s name, and all its arguments will appear. Set interface elements like sliders, color pickers, or switches for each parameter to your heart’s content!\u003C/p>\n\u003Ch2 id=\"what-setta-is-not\">What Setta Is \u003Cem>Not\u003C/em>\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Not a WYSIWYG Web Builder\u003C/strong>: Setta won’t generate custom HTML pages or pixel-perfect UIs. It produces standardized, interactive components inside its own interface.\u003C/li>\n\u003Cli>\u003Cstrong>Not a Visual Programming System\u003C/strong>: You still write regular Python. Setta just provides a streamlined UI so you and other users can interact with your functions without wrestling with frontend code or config files.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"how-setta-empowers-developers-and-users\">How Setta Empowers Developers and Users\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Cstrong>Unified Configuration and UI\u003C/strong>: Config and frontend tools solve parts of the puzzle while adding complexity. Setta treats your config and UI as one, while eliminating the config and UI code complexity entirely.\u003C/li>\n\u003Cli>\u003Cstrong>Rich, Interactive Experiences\u003C/strong>: Insert markdown docs, tooltips, or YouTube videos so users can learn as they go—no diving into separate READMEs.\u003C/li>\n\u003Cli>\u003Cstrong>Flexible Usability\u003C/strong>: Hide less-used functions to keep the UI clean. We’ve also got upcoming features like meta controls and user modes that will further simplify the interface for different audiences.\u003C/li>\n\u003Cli>\u003Cstrong>Effortless Sharing\u003C/strong>: Hand off your project to anyone; they can explore the UI and learn what they need, without constant help from you.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"whats-next\">What’s Next?\u003C/h2>\n\u003Cp>We’re actively developing Setta with new features and improvements. In our latest releases, we’ve added:\u003C/p>\n\u003Cul>\n\u003Cli>Support for chat interfaces through a new “Chat” section type\u003C/li>\n\u003Cli>Artifact management improvements\u003C/li>\n\u003Cli>Bug fixes compatibility\u003C/li>\n\u003C/ul>\n\u003Cp>And there’s a whole lot more on the way!\u003C/p>\n\u003Ch2 id=\"join-the-setta-community\">Join the Setta Community\u003C/h2>\n\u003Cul>\n\u003Cli>Check out our \u003Ca href=\"https:docs.setta.dev\">documentation\u003C/a>\u003C/li>\n\u003Cli>Join our \u003Ca href=\"https://discord.gg/MmHJz75bZ5\">Discord community\u003C/a>\u003C/li>\n\u003Cli>Star us on \u003Ca href=\"https://github.com/settadev/setta\">GitHub\u003C/a>\u003C/li>\n\u003Cli>Try our \u003Ca href=\"https://github.com/settadev/examples\">example projects\u003C/a>\u003C/li>\n\u003Cli>Follow us on \u003Ca href=\"https://x.com/settadev\">X\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":40,"imagePaths":82,"frontmatter":83},[41,45,48,51,55,58,61,64,67,70,73,76,79],{"depth":42,"slug":43,"text":44},2,"no-more-donkeywork","No More Donkeywork!",{"depth":42,"slug":46,"text":47},"what-is-setta","What Is Setta?",{"depth":42,"slug":49,"text":50},"try-it-first","Try It First!",{"depth":52,"slug":53,"text":54},3,"stream-diffusion-image-to-image","Stream Diffusion Image-to-Image",{"depth":52,"slug":56,"text":57},"hugging-face-trl-language-model-finetuning","Hugging Face TRL Language Model Finetuning",{"depth":52,"slug":59,"text":60},"llama-3-chat-ui-powered-by-the-groq-api","Llama 3 Chat UI powered by the Groq API",{"depth":52,"slug":62,"text":63},"transformers-sequence-classification","Transformers Sequence Classification",{"depth":52,"slug":65,"text":66},"pytorch-metric-learning","PyTorch Metric Learning",{"depth":42,"slug":68,"text":69},"why-setta-is-betta","Why Setta Is Betta",{"depth":42,"slug":71,"text":72},"what-setta-is-not","What Setta Is Not",{"depth":42,"slug":74,"text":75},"how-setta-empowers-developers-and-users","How Setta Empowers Developers and Users",{"depth":42,"slug":77,"text":78},"whats-next","What’s Next?",{"depth":42,"slug":80,"text":81},"join-the-setta-community","Join the Setta Community",[31,32,33,34,35],{"title":14,"description":15,"date":84,"tags":85,"author":17,"featuredImage":86},["Date","2024-02-28T00:00:00.000Z"],[19,20,21,22,23],{"src":25,"alt":26},"introducing-setta/index.md"]