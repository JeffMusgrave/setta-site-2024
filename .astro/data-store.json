[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://setta.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{\"bash\":\"shellscript\",\"sh\":\"shellscript\",\"shell\":\"shellscript\",\"zsh\":\"shellscript\",\"py\":\"python\"},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","content-config-digest","2bb656441439dc01","blog",["Map",11,12],"getting-started-with-setta",{"id":11,"data":13,"body":27,"filePath":28,"assetImports":29,"digest":31,"rendered":32,"legacyId":51},{"title":14,"description":15,"date":16,"author":17,"tags":18,"featuredImage":23,"draft":26},"Getting Started with Setta: A Quick Guide to Configuration UIs","Learn how to transform your Python functions into interactive UIs with Setta in under 5 minutes. No frontend experience required.",["Date","2024-02-23T00:00:00.000Z"],"Setta Team",[19,20,21,22],"tutorial","getting-started","python","ui",{"src":24,"alt":25},"office.avif","Python code in a modern editor",false,"If you're tired of writing boilerplate code for configuration parsing and building frontend interfaces, Setta is here to help. In this quick guide, we'll show you how to transform your Python functions into interactive UIs with just a few lines of code.\n\n## Installation\n\nFirst, let's get Setta installed. You can use pip:\n\n```bash\npip install setta\n```\n\n## Your First Setta UI\n\nLet's start with a simple machine learning training script:\n\n```python\nfrom setta import configure\n\n@configure\ndef train_model(\n    learning_rate: float = 0.001,\n    batch_size: int = 32,\n    epochs: int = 100,\n    model_type: str = \"resnet18\"\n):\n    \"\"\"Train a neural network model.\n\n    Args:\n        learning_rate: Learning rate for optimization\n        batch_size: Number of samples per batch\n        epochs: Number of training epochs\n        model_type: Type of model architecture to use\n    \"\"\"\n    # Your training code here\n    print(f\"Training {model_type} for {epochs} epochs...\")\n```\n\n![Developer working on a config file](./screen.avif)\n\nThat's it! The `@configure` decorator automatically creates an interactive UI for your function. Run your script:\n\n```bash\npython train.py\n```\n\nSetta will automatically:\n\n1. Launch a local server\n2. Open your browser to the UI\n3. Provide interactive controls for all parameters\n4. Handle validation and type checking\n5. Generate documentation from your docstrings\n\n## Advanced Features\n\nYou can also use type hints to create more sophisticated UIs:\n\n```python\nfrom typing import Literal, List\nfrom pathlib import Path\n\n@configure\ndef preprocess_data(\n    input_path: Path,\n    output_format: Literal[\"csv\", \"parquet\", \"json\"] = \"csv\",\n    columns: List[str] = [\"id\", \"features\", \"label\"],\n    normalize: bool = True\n):\n    \"\"\"Preprocess your dataset with configurable options.\"\"\"\n    pass\n```\n\nSetta automatically creates appropriate UI controls based on your type hints:\n\n- `Path` becomes a file picker\n- `Literal` becomes a dropdown\n- `List` becomes a dynamic list input\n- `bool` becomes a toggle switch\n\nStay tuned for more tutorials on advanced Setta features!","src/content/blog/getting-started-with-setta/index.md",[30],"./screen.avif","6ffb95e1b91a3570",{"html":33,"metadata":34},"\u003Cp>If you’re tired of writing boilerplate code for configuration parsing and building frontend interfaces, Setta is here to help. In this quick guide, we’ll show you how to transform your Python functions into interactive UIs with just a few lines of code.\u003C/p>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Cp>First, let’s get Setta installed. You can use pip:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> setta\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"your-first-setta-ui\">Your First Setta UI\u003C/h2>\n\u003Cp>Let’s start with a simple machine learning training script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> setta \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> train_model\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    learning_rate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.001\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch_size: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    epochs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    model_type: \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"resnet18\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Train a neural network model.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    Args:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        learning_rate: Learning rate for optimization\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        batch_size: Number of samples per batch\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        epochs: Number of training epochs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        model_type: Type of model architecture to use\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    # Your training code here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Training \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">model_type\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> for \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">epochs\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> epochs...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cimg __ASTRO_IMAGE_=\"{&#x22;src&#x22;:&#x22;./screen.avif&#x22;,&#x22;alt&#x22;:&#x22;Developer working on a config file&#x22;,&#x22;index&#x22;:0}\">\u003C/p>\n\u003Cp>That’s it! The \u003Ccode>@configure\u003C/code> decorator automatically creates an interactive UI for your function. Run your script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">python\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> train.py\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Setta will automatically:\u003C/p>\n\u003Col>\n\u003Cli>Launch a local server\u003C/li>\n\u003Cli>Open your browser to the UI\u003C/li>\n\u003Cli>Provide interactive controls for all parameters\u003C/li>\n\u003Cli>Handle validation and type checking\u003C/li>\n\u003Cli>Generate documentation from your docstrings\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"advanced-features\">Advanced Features\u003C/h2>\n\u003Cp>You can also use type hints to create more sophisticated UIs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> typing \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Literal, List\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pathlib \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Path\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> preprocess_data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    input_path: Path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    output_format: Literal[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"parquet\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    columns: List[\u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"features\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    normalize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> True\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Preprocess your dataset with configurable options.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    pass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Setta automatically creates appropriate UI controls based on your type hints:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>Path\u003C/code> becomes a file picker\u003C/li>\n\u003Cli>\u003Ccode>Literal\u003C/code> becomes a dropdown\u003C/li>\n\u003Cli>\u003Ccode>List\u003C/code> becomes a dynamic list input\u003C/li>\n\u003Cli>\u003Ccode>bool\u003C/code> becomes a toggle switch\u003C/li>\n\u003C/ul>\n\u003Cp>Stay tuned for more tutorials on advanced Setta features!\u003C/p>",{"headings":35,"imagePaths":46,"frontmatter":47},[36,40,43],{"depth":37,"slug":38,"text":39},2,"installation","Installation",{"depth":37,"slug":41,"text":42},"your-first-setta-ui","Your First Setta UI",{"depth":37,"slug":44,"text":45},"advanced-features","Advanced Features",[30],{"title":14,"description":15,"date":48,"tags":49,"author":17,"featuredImage":50},["Date","2024-02-23T00:00:00.000Z"],[19,20,21,22],{"src":24,"alt":25},"getting-started-with-setta/index.md"]