[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","content-config-digest","a5f459d4b98bc076","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://setta.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12],"introducing-setta",{"id":11,"data":13,"body":25,"filePath":26,"digest":27,"rendered":28,"legacyId":64},{"title":14,"description":15,"date":16,"author":17,"tags":18,"hideFeaturedImageInPost":24,"draft":24},"Introducing Setta: Python Without The Donkeywork","We're excited to announce the launch of Setta, an open-source tool that lets you expose Python functions as flexible UIs without writing boilerplate parsers or frontend code.",["Date","2024-02-28T00:00:00.000Z"],"Setta Team",[19,20,21,22,23],"launch","python","configuration","ui","developer-tools",false,"# Introducing Setta: Python Without The Donkeywork\n\nWe're thrilled to announce the launch of Setta, an open-source tool created by Kevin Musgrave and Jeff Musgrave that transforms how developers work with Python configurations and interfaces. Say goodbye to tedious boilerplate and hello to a streamlined Python development experience!\n\n## What is Setta?\n\nSetta is a general-purpose developer tool that streamlines Python coding, configuration, UI creation, and onboarding. At its core, Setta embraces a simple but powerful philosophy: your config is your UI.\n\nWith Setta, you can:\n\n- Skip the boilerplate parsers and frontend code - No more writing YAML parsers or building UI components from scratch\n- Effortlessly expose your Python functions as a flexible UI - Turn any Python function into an interactive interface with just a decorator\n- Configure, interact, and share with ease - Create intuitive interfaces for both technical and non-technical stakeholders\n\nWhether you're fine-tuning large AI models or writing small Python scripts, Setta can transform them into usable interfaces without special integrations or deep frontend knowledge.\n\n## Why Setta is Betta\n\nAs machine learning engineers and developers, we were tired of the repetitive workflow:\n\n- Write Python functions with parameters\n- Create config files (YAML, JSON, etc.)\n- Build parsers to interpret these configs\n- Develop a separate frontend to adjust parameters\n- Rebuild everything when parameters change\n\nThis cycle wastes valuable time and creates unnecessary complexity. Setta eliminates these pain points by automatically generating UI components directly from your Python functions and their type annotations.\n\nBy tying configuration and UI together, Setta lets you focus on what matters most—your code, not the infrastructure around it.\n\n## How Setta Works\n\nSetta's magic happens through a simple decorator that transforms Python functions into interactive UIs:\n\n```python\nfrom setta import configure\n\n@configure\ndef train_model(\n    learning_rate: float = 0.001,\n    batch_size: int = 32,\n    epochs: int = 100,\n    model_type: str = \"resnet18\"\n):\n    \"\"\"Train a neural network model.\"\"\"\n    # Your training code here\n    print(f\"Training {model_type} for {epochs} epochs...\")\n```\n\nThat's it! The @configure decorator automatically creates an interactive UI for your function. Just run your script with Setta, and a browser opens with controls for all your parameters, including:\n\n- Type-appropriate inputs (sliders, dropdowns, text fields)\n- Validation based on Python type hints\n- Documentation generated from your docstrings\n- Visual organization of related parameters\n\n## Boost Your Productivity\n\nSetta transforms your development process by:\n\n- Simplifying Workflow: Write your code in Setta or your favorite IDE, set configs with autocompletions and type-checking, and run your project—no extra steps required.\n- Saving Time: By auto-generating the UI from your config, Setta cuts out repetitive frontend work.\n- Enhancing Flexibility: With support for various input types, Setta adapts to a wide range of use cases.\n- Supporting Collaboration: Projects auto-export in a Git-friendly YAML format, making version control and sharing seamless.\n\n## Exciting Examples You Can Try Today\n\nThe best way to experience Setta's potential is to try it yourself! We've prepared several examples to showcase what you can build:\n\n- Stream Diffusion Image-to-Image: A real-time drawing interface that creates multiple AI-enhanced images as you sketch in parallel.\n- TRL Language Model Finetuning: Try different training configurations using the Hugging Face Transformer Reinforcement Learning (TRL) library.\n- Transformers Sequence Classification: Train text classification models using the Hugging Face Transformers library.\n- PyTorch Metric Learning: Finetune embedding models using different metric learning algorithms.\n\nYou can find all these examples in our examples repository. Each example comes with simple setup instructions—just clone the repo, follow the instructions, and see Setta in action!\n\n## Getting Started in Minutes\n\nGetting started with Setta is incredibly easy:\n\n```\n# Install Setta\npip install setta\n\n# Create a new project\nmkdir my_project\ncd my_project\n\n# Start Setta\nsetta\n```\n\nThe Setta UI will be available at http://127.0.0.1:8000/. From there, you can create a new configuration, add sections and parameters, and run your code.\n\n## What's Next?\n\nWe're actively developing Setta with new features and improvements. In our latest releases, we've added:\n\n- Support for chat interfaces through a new \"Chat\" section type\n- CLI command enhancements\n- Artifact management improvements\n- Bug fixes for cross-platform compatibility\n\n## Join the Setta Community\n\nSetta was brought to life by Kevin Musgrave, a full-stack developer, and Jeff Musgrave, a UI/UX and frontend expert. Together, they're passionate about making Python development more accessible and efficient for everyone.\n\nAs an open-source project available on GitHub, Setta thrives on community input. We welcome contributions, feedback, and feature requests:\n\n- Check out our documentation\n- Join our Discord community\n- Star us on GitHub\n- Follow us on Twitter\n\nWe're excited to see what you'll build with Setta! Happy coding!","src/content/blog/introducing-setta/index.md","89a712598125ee25",{"html":29,"metadata":30},"\u003Ch1 id=\"introducing-setta-python-without-the-donkeywork\">Introducing Setta: Python Without The Donkeywork\u003C/h1>\n\u003Cp>We’re thrilled to announce the launch of Setta, an open-source tool created by Kevin Musgrave and Jeff Musgrave that transforms how developers work with Python configurations and interfaces. Say goodbye to tedious boilerplate and hello to a streamlined Python development experience!\u003C/p>\n\u003Ch2 id=\"what-is-setta\">What is Setta?\u003C/h2>\n\u003Cp>Setta is a general-purpose developer tool that streamlines Python coding, configuration, UI creation, and onboarding. At its core, Setta embraces a simple but powerful philosophy: your config is your UI.\u003C/p>\n\u003Cp>With Setta, you can:\u003C/p>\n\u003Cul>\n\u003Cli>Skip the boilerplate parsers and frontend code - No more writing YAML parsers or building UI components from scratch\u003C/li>\n\u003Cli>Effortlessly expose your Python functions as a flexible UI - Turn any Python function into an interactive interface with just a decorator\u003C/li>\n\u003Cli>Configure, interact, and share with ease - Create intuitive interfaces for both technical and non-technical stakeholders\u003C/li>\n\u003C/ul>\n\u003Cp>Whether you’re fine-tuning large AI models or writing small Python scripts, Setta can transform them into usable interfaces without special integrations or deep frontend knowledge.\u003C/p>\n\u003Ch2 id=\"why-setta-is-betta\">Why Setta is Betta\u003C/h2>\n\u003Cp>As machine learning engineers and developers, we were tired of the repetitive workflow:\u003C/p>\n\u003Cul>\n\u003Cli>Write Python functions with parameters\u003C/li>\n\u003Cli>Create config files (YAML, JSON, etc.)\u003C/li>\n\u003Cli>Build parsers to interpret these configs\u003C/li>\n\u003Cli>Develop a separate frontend to adjust parameters\u003C/li>\n\u003Cli>Rebuild everything when parameters change\u003C/li>\n\u003C/ul>\n\u003Cp>This cycle wastes valuable time and creates unnecessary complexity. Setta eliminates these pain points by automatically generating UI components directly from your Python functions and their type annotations.\u003C/p>\n\u003Cp>By tying configuration and UI together, Setta lets you focus on what matters most—your code, not the infrastructure around it.\u003C/p>\n\u003Ch2 id=\"how-setta-works\">How Setta Works\u003C/h2>\n\u003Cp>Setta’s magic happens through a simple decorator that transforms Python functions into interactive UIs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> setta \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> train_model\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    learning_rate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.001\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch_size: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    epochs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    model_type: \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"resnet18\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Train a neural network model.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    # Your training code here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Training \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">model_type\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> for \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">epochs\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> epochs...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s it! The @configure decorator automatically creates an interactive UI for your function. Just run your script with Setta, and a browser opens with controls for all your parameters, including:\u003C/p>\n\u003Cul>\n\u003Cli>Type-appropriate inputs (sliders, dropdowns, text fields)\u003C/li>\n\u003Cli>Validation based on Python type hints\u003C/li>\n\u003Cli>Documentation generated from your docstrings\u003C/li>\n\u003Cli>Visual organization of related parameters\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"boost-your-productivity\">Boost Your Productivity\u003C/h2>\n\u003Cp>Setta transforms your development process by:\u003C/p>\n\u003Cul>\n\u003Cli>Simplifying Workflow: Write your code in Setta or your favorite IDE, set configs with autocompletions and type-checking, and run your project—no extra steps required.\u003C/li>\n\u003Cli>Saving Time: By auto-generating the UI from your config, Setta cuts out repetitive frontend work.\u003C/li>\n\u003Cli>Enhancing Flexibility: With support for various input types, Setta adapts to a wide range of use cases.\u003C/li>\n\u003Cli>Supporting Collaboration: Projects auto-export in a Git-friendly YAML format, making version control and sharing seamless.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"exciting-examples-you-can-try-today\">Exciting Examples You Can Try Today\u003C/h2>\n\u003Cp>The best way to experience Setta’s potential is to try it yourself! We’ve prepared several examples to showcase what you can build:\u003C/p>\n\u003Cul>\n\u003Cli>Stream Diffusion Image-to-Image: A real-time drawing interface that creates multiple AI-enhanced images as you sketch in parallel.\u003C/li>\n\u003Cli>TRL Language Model Finetuning: Try different training configurations using the Hugging Face Transformer Reinforcement Learning (TRL) library.\u003C/li>\n\u003Cli>Transformers Sequence Classification: Train text classification models using the Hugging Face Transformers library.\u003C/li>\n\u003Cli>PyTorch Metric Learning: Finetune embedding models using different metric learning algorithms.\u003C/li>\n\u003C/ul>\n\u003Cp>You can find all these examples in our examples repository. Each example comes with simple setup instructions—just clone the repo, follow the instructions, and see Setta in action!\u003C/p>\n\u003Ch2 id=\"getting-started-in-minutes\">Getting Started in Minutes\u003C/h2>\n\u003Cp>Getting started with Setta is incredibly easy:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan># Install Setta\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>pip install setta\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># Create a new project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>mkdir my_project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>cd my_project\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan># Start Setta\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>setta\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The Setta UI will be available at \u003Ca href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/\u003C/a>. From there, you can create a new configuration, add sections and parameters, and run your code.\u003C/p>\n\u003Ch2 id=\"whats-next\">What’s Next?\u003C/h2>\n\u003Cp>We’re actively developing Setta with new features and improvements. In our latest releases, we’ve added:\u003C/p>\n\u003Cul>\n\u003Cli>Support for chat interfaces through a new “Chat” section type\u003C/li>\n\u003Cli>CLI command enhancements\u003C/li>\n\u003Cli>Artifact management improvements\u003C/li>\n\u003Cli>Bug fixes for cross-platform compatibility\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"join-the-setta-community\">Join the Setta Community\u003C/h2>\n\u003Cp>Setta was brought to life by Kevin Musgrave, a full-stack developer, and Jeff Musgrave, a UI/UX and frontend expert. Together, they’re passionate about making Python development more accessible and efficient for everyone.\u003C/p>\n\u003Cp>As an open-source project available on GitHub, Setta thrives on community input. We welcome contributions, feedback, and feature requests:\u003C/p>\n\u003Cul>\n\u003Cli>Check out our documentation\u003C/li>\n\u003Cli>Join our Discord community\u003C/li>\n\u003Cli>Star us on GitHub\u003C/li>\n\u003Cli>Follow us on Twitter\u003C/li>\n\u003C/ul>\n\u003Cp>We’re excited to see what you’ll build with Setta! Happy coding!\u003C/p>",{"headings":31,"imagePaths":60,"frontmatter":61},[32,35,39,42,45,48,51,54,57],{"depth":33,"slug":34,"text":14},1,"introducing-setta-python-without-the-donkeywork",{"depth":36,"slug":37,"text":38},2,"what-is-setta","What is Setta?",{"depth":36,"slug":40,"text":41},"why-setta-is-betta","Why Setta is Betta",{"depth":36,"slug":43,"text":44},"how-setta-works","How Setta Works",{"depth":36,"slug":46,"text":47},"boost-your-productivity","Boost Your Productivity",{"depth":36,"slug":49,"text":50},"exciting-examples-you-can-try-today","Exciting Examples You Can Try Today",{"depth":36,"slug":52,"text":53},"getting-started-in-minutes","Getting Started in Minutes",{"depth":36,"slug":55,"text":56},"whats-next","What’s Next?",{"depth":36,"slug":58,"text":59},"join-the-setta-community","Join the Setta Community",[],{"title":14,"description":15,"date":62,"tags":63,"author":17},["Date","2024-02-28T00:00:00.000Z"],[19,20,21,22,23],"introducing-setta/index.md"]