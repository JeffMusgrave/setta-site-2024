[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.3.0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://setta.dev\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[\"setta.dev\"],\"remotePatterns\":[{\"protocol\":\"https\"}]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","content-config-digest","9b68d5d4d587a43e","blog",["Map",11,12,44,45,82,83,131,132,151,152,169,170,188,189,208,209,228,229,247,248,266,267,285,286,303,304],"getting-started-with-setta",{"id":11,"data":13,"body":22,"filePath":23,"digest":24,"rendered":25,"legacyId":43},{"title":14,"description":15,"date":16,"tags":17},"Getting Started with Setta: A Quick Guide to Configuration UIs","Learn how to transform your Python functions into interactive UIs with Setta in under 5 minutes. No frontend experience required.",["Date","2024-02-23T00:00:00.000Z"],[18,19,20,21],"tutorial","getting-started","python","ui","If you're tired of writing boilerplate code for configuration parsing and building frontend interfaces, Setta is here to help. In this quick guide, we'll show you how to transform your Python functions into interactive UIs with just a few lines of code.\n\n## Installation\n\nFirst, let's get Setta installed. You can use pip:\n\n```bash\npip install setta\n```\n\n## Your First Setta UI\n\nLet's start with a simple machine learning training script:\n\n```python\nfrom setta import configure\n\n@configure\ndef train_model(\n    learning_rate: float = 0.001,\n    batch_size: int = 32,\n    epochs: int = 100,\n    model_type: str = \"resnet18\"\n):\n    \"\"\"Train a neural network model.\n\n    Args:\n        learning_rate: Learning rate for optimization\n        batch_size: Number of samples per batch\n        epochs: Number of training epochs\n        model_type: Type of model architecture to use\n    \"\"\"\n    # Your training code here\n    print(f\"Training {model_type} for {epochs} epochs...\")\n```\n\nThat's it! The `@configure` decorator automatically creates an interactive UI for your function. Run your script:\n\n```bash\npython train.py\n```\n\nSetta will automatically:\n\n1. Launch a local server\n2. Open your browser to the UI\n3. Provide interactive controls for all parameters\n4. Handle validation and type checking\n5. Generate documentation from your docstrings\n\n## Advanced Features\n\nYou can also use type hints to create more sophisticated UIs:\n\n```python\nfrom typing import Literal, List\nfrom pathlib import Path\n\n@configure\ndef preprocess_data(\n    input_path: Path,\n    output_format: Literal[\"csv\", \"parquet\", \"json\"] = \"csv\",\n    columns: List[str] = [\"id\", \"features\", \"label\"],\n    normalize: bool = True\n):\n    \"\"\"Preprocess your dataset with configurable options.\"\"\"\n    pass\n```\n\nSetta automatically creates appropriate UI controls based on your type hints:\n\n- `Path` becomes a file picker\n- `Literal` becomes a dropdown\n- `List` becomes a dynamic list input\n- `bool` becomes a toggle switch\n\nStay tuned for more tutorials on advanced Setta features!","src/content/blog/getting-started-with-setta.md","8a4ffe79a2188aa8",{"html":26,"metadata":27},"\u003Cp>If you’re tired of writing boilerplate code for configuration parsing and building frontend interfaces, Setta is here to help. In this quick guide, we’ll show you how to transform your Python functions into interactive UIs with just a few lines of code.\u003C/p>\n\u003Ch2 id=\"installation\">Installation\u003C/h2>\n\u003Cp>First, let’s get Setta installed. You can use pip:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">pip\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> install\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> setta\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"your-first-setta-ui\">Your First Setta UI\u003C/h2>\n\u003Cp>Let’s start with a simple machine learning training script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> setta \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> train_model\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    learning_rate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.001\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch_size: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    epochs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    model_type: \u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"resnet18\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Train a neural network model.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    Args:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        learning_rate: Learning rate for optimization\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        batch_size: Number of samples per batch\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        epochs: Number of training epochs\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        model_type: Type of model architecture to use\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    # Your training code here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    print\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">f\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Training \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">model_type\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> for \u003C/span>\u003Cspan style=\"color:#79B8FF\">{\u003C/span>\u003Cspan style=\"color:#E1E4E8\">epochs\u003C/span>\u003Cspan style=\"color:#79B8FF\">}\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> epochs...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That’s it! The \u003Ccode>@configure\u003C/code> decorator automatically creates an interactive UI for your function. Run your script:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">python\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> train.py\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Setta will automatically:\u003C/p>\n\u003Col>\n\u003Cli>Launch a local server\u003C/li>\n\u003Cli>Open your browser to the UI\u003C/li>\n\u003Cli>Provide interactive controls for all parameters\u003C/li>\n\u003Cli>Handle validation and type checking\u003C/li>\n\u003Cli>Generate documentation from your docstrings\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"advanced-features\">Advanced Features\u003C/h2>\n\u003Cp>You can also use type hints to create more sophisticated UIs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> typing \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Literal, List\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pathlib \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Path\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> preprocess_data\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    input_path: Path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    output_format: Literal[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"parquet\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"json\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"csv\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    columns: List[\u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"features\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"label\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    normalize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> True\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Preprocess your dataset with configurable options.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    pass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Setta automatically creates appropriate UI controls based on your type hints:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>Path\u003C/code> becomes a file picker\u003C/li>\n\u003Cli>\u003Ccode>Literal\u003C/code> becomes a dropdown\u003C/li>\n\u003Cli>\u003Ccode>List\u003C/code> becomes a dynamic list input\u003C/li>\n\u003Cli>\u003Ccode>bool\u003C/code> becomes a toggle switch\u003C/li>\n\u003C/ul>\n\u003Cp>Stay tuned for more tutorials on advanced Setta features!\u003C/p>",{"headings":28,"imagePaths":39,"frontmatter":40},[29,33,36],{"depth":30,"slug":31,"text":32},2,"installation","Installation",{"depth":30,"slug":34,"text":35},"your-first-setta-ui","Your First Setta UI",{"depth":30,"slug":37,"text":38},"advanced-features","Advanced Features",[],{"title":14,"description":15,"date":41,"tags":42},["Date","2024-02-23T00:00:00.000Z"],[18,19,20,21],"getting-started-with-setta.md","parameter-sweeps-with-setta",{"id":44,"data":46,"body":55,"filePath":56,"digest":57,"rendered":58,"legacyId":81},{"title":47,"description":48,"date":49,"tags":50},"Efficient Parameter Sweeps with Setta: From Manual Testing to Automated Exploration","Learn how to use Setta's parameter sweep features to automate your experimentation workflow and discover optimal configurations.",["Date","2024-02-20T00:00:00.000Z"],[51,52,53,54],"parameter-sweep","automation","machine-learning","advanced","Parameter sweeps are essential for finding optimal configurations, but they often require custom scripts and lots of boilerplate code. Setta makes this process painless with built-in sweep support. Let's explore how.\n\n## Understanding Parameter Sweeps\n\nBefore diving into the code, let's understand what a parameter sweep is. When you're tuning a system (whether it's a machine learning model, an image processing pipeline, or any other configurable system), you often need to try multiple combinations of parameters to find the best configuration.\n\nFor example, in machine learning, you might want to try:\n\n- Different learning rates: 0.1, 0.01, 0.001\n- Different batch sizes: 16, 32, 64\n- Different optimizers: Adam, SGD, RMSprop\n\nManually testing all combinations would be time-consuming and error-prone.\n\n## Implementing Sweeps in Setta\n\nHere's how you can implement a parameter sweep using Setta:\n\n```python\nfrom setta import configure, sweep\nfrom typing import Literal\n\n@configure\n@sweep(n_jobs=-1)  # Use all available CPU cores\ndef train_model(\n    learning_rate: float = sweep([0.1, 0.01, 0.001]),\n    batch_size: int = sweep([16, 32, 64]),\n    optimizer: Literal[\"adam\", \"sgd\", \"rmsprop\"] = sweep([\"adam\", \"sgd\"]),\n    epochs: int = 10\n) -> float:\n    \"\"\"Train model and return validation accuracy.\"\"\"\n    # Your training code here\n    return validation_accuracy\n\n# Setta will automatically:\n# 1. Run all combinations (3 x 3 x 2 = 18 total runs)\n# 2. Track results\n# 3. Visualize the outcomes\n```\n\n## Visualizing Results\n\nSetta automatically generates interactive visualizations of your sweep results:\n\n- Parallel coordinates plots for understanding parameter relationships\n- Surface plots for pairwise parameter interactions\n- Bar charts for individual parameter effects\n- Automatic identification of best configurations\n\n## Best Practices\n\nWhen running parameter sweeps:\n\n1. **Start Broad, Then Refine**: Begin with a wide range of values, then zoom in on promising regions\n2. **Monitor Resource Usage**: Setta provides built-in resource monitoring\n3. **Use Asynchronous Execution**: For long-running sweeps, use Setta's async support:\n\n```python\n@configure\n@sweep(async_run=True)\nasync def long_running_sweep(...):\n    pass\n```\n\n## Saving and Sharing Results\n\nSetta automatically saves sweep results in a git-friendly format:\n\n```yaml\n# sweep_results.yaml\nbest_config:\n  learning_rate: 0.001\n  batch_size: 32\n  optimizer: adam\n  validation_accuracy: 0.945\n\nall_runs:\n  - config: { ... }\n    result: 0.923\n  - config: { ... }\n    result: 0.945\n```\n\nThis makes it easy to version control your experiments and share results with your team.\n\nStay tuned for more advanced Setta tutorials!","src/content/blog/parameter-sweeps-with-setta.md","858f9d4d66d7e6c0",{"html":59,"metadata":60},"\u003Cp>Parameter sweeps are essential for finding optimal configurations, but they often require custom scripts and lots of boilerplate code. Setta makes this process painless with built-in sweep support. Let’s explore how.\u003C/p>\n\u003Ch2 id=\"understanding-parameter-sweeps\">Understanding Parameter Sweeps\u003C/h2>\n\u003Cp>Before diving into the code, let’s understand what a parameter sweep is. When you’re tuning a system (whether it’s a machine learning model, an image processing pipeline, or any other configurable system), you often need to try multiple combinations of parameters to find the best configuration.\u003C/p>\n\u003Cp>For example, in machine learning, you might want to try:\u003C/p>\n\u003Cul>\n\u003Cli>Different learning rates: 0.1, 0.01, 0.001\u003C/li>\n\u003Cli>Different batch sizes: 16, 32, 64\u003C/li>\n\u003Cli>Different optimizers: Adam, SGD, RMSprop\u003C/li>\n\u003C/ul>\n\u003Cp>Manually testing all combinations would be time-consuming and error-prone.\u003C/p>\n\u003Ch2 id=\"implementing-sweeps-in-setta\">Implementing Sweeps in Setta\u003C/h2>\n\u003Cp>Here’s how you can implement a parameter sweep using Setta:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> setta \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> configure, sweep\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> typing \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Literal\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@sweep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">n_jobs\u003C/span>\u003Cspan style=\"color:#F97583\">=-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)  \u003C/span>\u003Cspan style=\"color:#6A737D\"># Use all available CPU cores\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> train_model\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    learning_rate: \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sweep([\u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.01\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.001\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    batch_size: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sweep([\u003C/span>\u003Cspan style=\"color:#79B8FF\">16\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">64\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    optimizer: Literal[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"adam\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"sgd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rmsprop\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> sweep([\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"adam\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"sgd\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    epochs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">) -> \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Train model and return validation accuracy.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    # Your training code here\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> validation_accuracy\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Setta will automatically:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 1. Run all combinations (3 x 3 x 2 = 18 total runs)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 2. Track results\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># 3. Visualize the outcomes\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"visualizing-results\">Visualizing Results\u003C/h2>\n\u003Cp>Setta automatically generates interactive visualizations of your sweep results:\u003C/p>\n\u003Cul>\n\u003Cli>Parallel coordinates plots for understanding parameter relationships\u003C/li>\n\u003Cli>Surface plots for pairwise parameter interactions\u003C/li>\n\u003Cli>Bar charts for individual parameter effects\u003C/li>\n\u003Cli>Automatic identification of best configurations\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"best-practices\">Best Practices\u003C/h2>\n\u003Cp>When running parameter sweeps:\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>Start Broad, Then Refine\u003C/strong>: Begin with a wide range of values, then zoom in on promising regions\u003C/li>\n\u003Cli>\u003Cstrong>Monitor Resource Usage\u003C/strong>: Setta provides built-in resource monitoring\u003C/li>\n\u003Cli>\u003Cstrong>Use Asynchronous Execution\u003C/strong>: For long-running sweeps, use Setta’s async support:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@sweep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">async_run\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\">True\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#F97583\"> def\u003C/span>\u003Cspan style=\"color:#B392F0\"> long_running_sweep\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(...):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    pass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"saving-and-sharing-results\">Saving and Sharing Results\u003C/h2>\n\u003Cp>Setta automatically saves sweep results in a git-friendly format:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"yaml\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># sweep_results.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">best_config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  learning_rate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.001\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  batch_size\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">32\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  optimizer\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">adam\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  validation_accuracy\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.945\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">all_runs\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.923\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  - \u003C/span>\u003Cspan style=\"color:#85E89D\">config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: { \u003C/span>\u003Cspan style=\"color:#79B8FF\">...\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    result\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.945\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This makes it easy to version control your experiments and share results with your team.\u003C/p>\n\u003Cp>Stay tuned for more advanced Setta tutorials!\u003C/p>",{"headings":61,"imagePaths":77,"frontmatter":78},[62,65,68,71,74],{"depth":30,"slug":63,"text":64},"understanding-parameter-sweeps","Understanding Parameter Sweeps",{"depth":30,"slug":66,"text":67},"implementing-sweeps-in-setta","Implementing Sweeps in Setta",{"depth":30,"slug":69,"text":70},"visualizing-results","Visualizing Results",{"depth":30,"slug":72,"text":73},"best-practices","Best Practices",{"depth":30,"slug":75,"text":76},"saving-and-sharing-results","Saving and Sharing Results",[],{"title":47,"description":48,"date":79,"tags":80},["Date","2024-02-20T00:00:00.000Z"],[51,52,53,54],"parameter-sweeps-with-setta.md","real-world-setta-case-study",{"id":82,"data":84,"body":91,"filePath":92,"digest":93,"rendered":94,"legacyId":130},{"title":85,"description":86,"date":87,"tags":88},"Case Study: How Acme Corp Streamlined Their ML Pipeline with Setta","A deep dive into how a real team eliminated configuration complexity and improved collaboration using Setta. Learn from their journey and best practices.",["Date","2024-02-15T00:00:00.000Z"],[89,53,90,72],"case-study","team-collaboration","At Setta, we love hearing how teams use our tools to solve real-world problems. Today, we're excited to share how Acme Corp's machine learning team transformed their workflow using Setta. This case study shows how they went from struggling with configuration management to having a streamlined, collaborative process.\n\n## The Challenge\n\nAcme's ML team faced several common challenges:\n\n- **Configuration Sprawl**: Different team members had their own ways of handling configs\n- **Collaboration Friction**: Sharing exact experimental configurations was difficult\n- **Documentation Debt**: Config options were poorly documented\n- **Reproducibility Issues**: Recreating specific experimental conditions was time-consuming\n\n## The Solution\n\nThe team adopted Setta as their configuration management solution. Here's how they structured their project:\n\n```\nacme_ml/\n├── configs/\n│   ├── base_config.yaml\n│   └── experiments/\n├── src/\n│   ├── training/\n│   │   ├── train.py\n│   │   └── validate.py\n│   └── data/\n│       └── preprocessing.py\n└── notebooks/\n    └── analysis.ipynb\n```\n\nTheir main training configuration using Setta:\n\n```python\nfrom setta import configure, Depends\nfrom typing import Literal, Optional\nfrom pathlib import Path\n\nclass TrainingConfig:\n    @configure\n    def data_config(\n        dataset_path: Path,\n        val_split: float = 0.2,\n        augmentations: list[str] = [\"flip\", \"rotate\"],\n        cache_dir: Optional[Path] = None\n    ):\n        \"\"\"Configure dataset and preprocessing options.\"\"\"\n        pass\n\n    @configure\n    def model_config(\n        architecture: Literal[\"resnet\", \"vit\", \"custom\"] = \"resnet\",\n        pretrained: bool = True,\n        custom_checkpoint: Optional[Path] = None\n    ):\n        \"\"\"Configure model architecture and initialization.\"\"\"\n        pass\n\n    @configure\n    def train(\n        data: dict = Depends(data_config),\n        model: dict = Depends(model_config),\n        batch_size: int = 32,\n        epochs: int = 100,\n        early_stopping: bool = True\n    ):\n        \"\"\"Main training configuration.\"\"\"\n        pass\n```\n\n## Key Benefits\n\n### 1. Improved Documentation\n\nSetta automatically generated interactive documentation from their type hints and docstrings. New team members could quickly understand available options:\n\n```python\n@configure\ndef preprocess_batch(\n    normalize: bool = True,\n    normalize_method: Literal[\"standard\", \"minmax\", \"robust\"] = \"standard\",\n    clip_outliers: Optional[float] = None  # None or percentile threshold\n):\n    \"\"\"Preprocess a batch of data.\n\n    Args:\n        normalize: Whether to normalize features\n        normalize_method: Method of normalization\n        clip_outliers: If set, clip values beyond this percentile\n    \"\"\"\n    pass\n```\n\n### 2. Better Collaboration\n\nTeam members could easily share configurations:\n\n```bash\n# Export configuration\nsetta export my_experiment.yaml\n\n# Share and reproduce\nsetta run train.py --config my_experiment.yaml\n```\n\n### 3. Experiment Tracking\n\nSetta's integration with their experiment tracking system made it easy to log and compare runs:\n\n```python\n@configure\n@log_experiment  # Custom decorator for their tracking system\ndef training_run(**config):\n    metrics = train_model(**config)\n    return metrics\n```\n\n## Results\n\nAfter adopting Setta, the team saw:\n\n- 60% reduction in time spent on configuration management\n- 45% fewer configuration-related bugs\n- 80% faster onboarding for new team members\n- 100% reproducible experiments\n\n## Lessons Learned\n\n1. **Start Simple**: They began with basic configurations and gradually added complexity\n2. **Document Everything**: They made full use of Python's type hints and docstrings\n3. **Version Control**: They treated configurations as code and versioned them with git\n4. **Automate Testing**: They added automated tests for their configurations:\n\n```python\ndef test_config_validation():\n    config = TrainingConfig.train()\n    assert config.batch_size > 0\n    assert 0 \u003C config.data.val_split \u003C 1\n```\n\n## Looking Forward\n\nThe team is now exploring advanced Setta features:\n\n- Parameter sweep automation\n- Distributed training configuration\n- Custom UI components for specialized parameters\n\nWe're excited to see how they continue to evolve their workflow with Setta!\n\n---\n\n_Note: Some details have been modified to protect confidentiality, but the core learnings and patterns are real._","src/content/blog/real-world-setta-case-study.md","2b4f64a91eee3560",{"html":95,"metadata":96},"\u003Cp>At Setta, we love hearing how teams use our tools to solve real-world problems. Today, we’re excited to share how Acme Corp’s machine learning team transformed their workflow using Setta. This case study shows how they went from struggling with configuration management to having a streamlined, collaborative process.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>Acme’s ML team faced several common challenges:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>Configuration Sprawl\u003C/strong>: Different team members had their own ways of handling configs\u003C/li>\n\u003Cli>\u003Cstrong>Collaboration Friction\u003C/strong>: Sharing exact experimental configurations was difficult\u003C/li>\n\u003Cli>\u003Cstrong>Documentation Debt\u003C/strong>: Config options were poorly documented\u003C/li>\n\u003Cli>\u003Cstrong>Reproducibility Issues\u003C/strong>: Recreating specific experimental conditions was time-consuming\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"the-solution\">The Solution\u003C/h2>\n\u003Cp>The team adopted Setta as their configuration management solution. Here’s how they structured their project:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>acme_ml/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── configs/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── base_config.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── experiments/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>├── src/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   ├── training/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   ├── train.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   │   └── validate.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│   └── data/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>│       └── preprocessing.py\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>└── notebooks/\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>    └── analysis.ipynb\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Their main training configuration using Setta:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> setta \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> configure, Depends\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> typing \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Literal, Optional\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> pathlib \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Path\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> TrainingConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    @configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> data_config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        dataset_path: Path,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        val_split: \u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0.2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        augmentations: list[\u003C/span>\u003Cspan style=\"color:#79B8FF\">str\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"flip\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"rotate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        cache_dir: Optional[Path] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> None\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"\"\"Configure dataset and preprocessing options.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        pass\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    @configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> model_config\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        architecture: Literal[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"resnet\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"vit\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"custom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"resnet\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        pretrained: \u003C/span>\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> True\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        custom_checkpoint: Optional[Path] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> None\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"\"\"Configure model architecture and initialization.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        pass\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    @configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    def\u003C/span>\u003Cspan style=\"color:#B392F0\"> train\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        data: \u003C/span>\u003Cspan style=\"color:#79B8FF\">dict\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Depends(data_config),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        model: \u003C/span>\u003Cspan style=\"color:#79B8FF\">dict\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Depends(model_config),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        batch_size: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        epochs: \u003C/span>\u003Cspan style=\"color:#79B8FF\">int\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 100\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        early_stopping: \u003C/span>\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> True\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        \"\"\"Main training configuration.\"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        pass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"key-benefits\">Key Benefits\u003C/h2>\n\u003Ch3 id=\"1-improved-documentation\">1. Improved Documentation\u003C/h3>\n\u003Cp>Setta automatically generated interactive documentation from their type hints and docstrings. New team members could quickly understand available options:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> preprocess_batch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    normalize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">bool\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#79B8FF\"> True\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    normalize_method: Literal[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"standard\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"minmax\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"robust\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"standard\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    clip_outliers: Optional[\u003C/span>\u003Cspan style=\"color:#79B8FF\">float\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> None\u003C/span>\u003Cspan style=\"color:#6A737D\">  # None or percentile threshold\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"Preprocess a batch of data.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    Args:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        normalize: Whether to normalize features\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        normalize_method: Method of normalization\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">        clip_outliers: If set, clip values beyond this percentile\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#9ECBFF\">    \"\"\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    pass\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"2-better-collaboration\">2. Better Collaboration\u003C/h3>\n\u003Cp>Team members could easily share configurations:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Export configuration\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">setta\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> export\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my_experiment.yaml\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># Share and reproduce\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">setta\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> run\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> train.py\u003C/span>\u003Cspan style=\"color:#79B8FF\"> --config\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> my_experiment.yaml\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"3-experiment-tracking\">3. Experiment Tracking\u003C/h3>\n\u003Cp>Setta’s integration with their experiment tracking system made it easy to log and compare runs:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@configure\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">@log_experiment\u003C/span>\u003Cspan style=\"color:#6A737D\">  # Custom decorator for their tracking system\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> training_run\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">config):\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    metrics \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> train_model(\u003C/span>\u003Cspan style=\"color:#F97583\">**\u003C/span>\u003Cspan style=\"color:#E1E4E8\">config)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> metrics\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"results\">Results\u003C/h2>\n\u003Cp>After adopting Setta, the team saw:\u003C/p>\n\u003Cul>\n\u003Cli>60% reduction in time spent on configuration management\u003C/li>\n\u003Cli>45% fewer configuration-related bugs\u003C/li>\n\u003Cli>80% faster onboarding for new team members\u003C/li>\n\u003Cli>100% reproducible experiments\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"lessons-learned\">Lessons Learned\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cstrong>Start Simple\u003C/strong>: They began with basic configurations and gradually added complexity\u003C/li>\n\u003Cli>\u003Cstrong>Document Everything\u003C/strong>: They made full use of Python’s type hints and docstrings\u003C/li>\n\u003Cli>\u003Cstrong>Version Control\u003C/strong>: They treated configurations as code and versioned them with git\u003C/li>\n\u003Cli>\u003Cstrong>Automate Testing\u003C/strong>: They added automated tests for their configurations:\u003C/li>\n\u003C/ol>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"python\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">def\u003C/span>\u003Cspan style=\"color:#B392F0\"> test_config_validation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">():\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    config \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> TrainingConfig.train()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    assert\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> config.batch_size \u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    assert\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> config.data.val_split \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"looking-forward\">Looking Forward\u003C/h2>\n\u003Cp>The team is now exploring advanced Setta features:\u003C/p>\n\u003Cul>\n\u003Cli>Parameter sweep automation\u003C/li>\n\u003Cli>Distributed training configuration\u003C/li>\n\u003Cli>Custom UI components for specialized parameters\u003C/li>\n\u003C/ul>\n\u003Cp>We’re excited to see how they continue to evolve their workflow with Setta!\u003C/p>\n\u003Chr>\n\u003Cp>\u003Cem>Note: Some details have been modified to protect confidentiality, but the core learnings and patterns are real.\u003C/em>\u003C/p>",{"headings":97,"imagePaths":126,"frontmatter":127},[98,101,104,107,111,114,117,120,123],{"depth":30,"slug":99,"text":100},"the-challenge","The Challenge",{"depth":30,"slug":102,"text":103},"the-solution","The Solution",{"depth":30,"slug":105,"text":106},"key-benefits","Key Benefits",{"depth":108,"slug":109,"text":110},3,"1-improved-documentation","1. Improved Documentation",{"depth":108,"slug":112,"text":113},"2-better-collaboration","2. Better Collaboration",{"depth":108,"slug":115,"text":116},"3-experiment-tracking","3. Experiment Tracking",{"depth":30,"slug":118,"text":119},"results","Results",{"depth":30,"slug":121,"text":122},"lessons-learned","Lessons Learned",{"depth":30,"slug":124,"text":125},"looking-forward","Looking Forward",[],{"title":85,"description":86,"date":128,"tags":129},["Date","2024-02-15T00:00:00.000Z"],[89,53,90,72],"real-world-setta-case-study.md","test-setta-1-0-release",{"id":131,"data":133,"filePath":140,"digest":141,"rendered":142,"legacyId":150},{"title":134,"description":135,"date":136,"tags":137},"Announcing Setta 1.0: Production-Ready Configuration Management","Setta 1.0 is here with improved stability, performance enhancements, and new features for production deployments.",["Date","2024-02-22T00:00:00.000Z"],[138,139],"release","announcement","src/content/blog/test-setta-1-0-release.md","d3f8b4d7181d2491",{"html":143,"metadata":144},"",{"headings":145,"imagePaths":146,"frontmatter":147},[],[],{"title":134,"description":135,"date":148,"tags":149},["Date","2024-02-22T00:00:00.000Z"],[138,139],"test-setta-1-0-release.md","test-migration-guide",{"id":151,"data":153,"filePath":159,"digest":160,"rendered":161,"legacyId":168},{"title":154,"description":155,"date":156,"tags":157},"Migrating to Setta 1.0: A Comprehensive Guide","Step-by-step guide to upgrading your existing Setta projects to version 1.0, including handling breaking changes.",["Date","2024-02-18T00:00:00.000Z"],[158,18],"migration","src/content/blog/test-migration-guide.md","6edebd6526bb2a0b",{"html":143,"metadata":162},{"headings":163,"imagePaths":164,"frontmatter":165},[],[],{"title":154,"description":155,"date":166,"tags":167},["Date","2024-02-18T00:00:00.000Z"],[158,18],"test-migration-guide.md","test-websocket-support",{"id":169,"data":171,"filePath":178,"digest":179,"rendered":180,"legacyId":187},{"title":172,"description":173,"date":174,"tags":175},"Real-time Configuration Updates with WebSocket Support","Learn how to use Setta's new WebSocket features for live configuration updates in distributed systems.",["Date","2024-02-12T00:00:00.000Z"],[176,177,54],"websockets","real-time","src/content/blog/test-websocket-support.md","37398ccc3b55f2e0",{"html":143,"metadata":181},{"headings":182,"imagePaths":183,"frontmatter":184},[],[],{"title":172,"description":173,"date":185,"tags":186},["Date","2024-02-12T00:00:00.000Z"],[176,177,54],"test-websocket-support.md","test-kubernetes-deployment",{"id":188,"data":190,"filePath":198,"digest":199,"rendered":200,"legacyId":207},{"title":191,"description":192,"date":193,"tags":194},"Deploying Setta in Kubernetes","Best practices for running Setta in Kubernetes environments, including configuration management and scaling.",["Date","2024-02-08T00:00:00.000Z"],[195,196,197],"kubernetes","deployment","operations","src/content/blog/test-kubernetes-deployment.md","98f0559a49cb7816",{"html":143,"metadata":201},{"headings":202,"imagePaths":203,"frontmatter":204},[],[],{"title":191,"description":192,"date":205,"tags":206},["Date","2024-02-08T00:00:00.000Z"],[195,196,197],"test-kubernetes-deployment.md","test-git-integration",{"id":208,"data":210,"filePath":218,"digest":219,"rendered":220,"legacyId":227},{"title":211,"description":212,"date":213,"tags":214},"Git-based Configuration Management with Setta","How to leverage Git for version control of your Setta configurations, including branching strategies and CI/CD integration.",["Date","2024-02-03T00:00:00.000Z"],[215,216,217],"git","version-control","devops","src/content/blog/test-git-integration.md","e00875d70af544b9",{"html":143,"metadata":221},{"headings":222,"imagePaths":223,"frontmatter":224},[],[],{"title":211,"description":212,"date":225,"tags":226},["Date","2024-02-03T00:00:00.000Z"],[215,216,217],"test-git-integration.md","test-custom-serializers",{"id":228,"data":230,"filePath":237,"digest":238,"rendered":239,"legacyId":246},{"title":231,"description":232,"date":233,"tags":234},"Building Custom Serializers in Setta","Extend Setta's serialization capabilities to support custom data types and formats in your configurations.",["Date","2024-01-28T00:00:00.000Z"],[235,236,54],"serialization","customization","src/content/blog/test-custom-serializers.md","9fe3e31d2d2c8b1b",{"html":143,"metadata":240},{"headings":241,"imagePaths":242,"frontmatter":243},[],[],{"title":231,"description":232,"date":244,"tags":245},["Date","2024-01-28T00:00:00.000Z"],[235,236,54],"test-custom-serializers.md","test-monitoring",{"id":247,"data":249,"filePath":256,"digest":257,"rendered":258,"legacyId":265},{"title":250,"description":251,"date":252,"tags":253},"Monitoring Setta in Production","Set up comprehensive monitoring for your Setta deployments, including metrics, logging, and alerting.",["Date","2024-01-22T00:00:00.000Z"],[254,255,197],"monitoring","production","src/content/blog/test-monitoring.md","3f0ee944979629b7",{"html":143,"metadata":259},{"headings":260,"imagePaths":261,"frontmatter":262},[],[],{"title":250,"description":251,"date":263,"tags":264},["Date","2024-01-22T00:00:00.000Z"],[254,255,197],"test-monitoring.md","test-type-system",{"id":266,"data":268,"filePath":275,"digest":276,"rendered":277,"legacyId":284},{"title":269,"description":270,"date":271,"tags":272},"Deep Dive: Setta's Type System","Understanding how Setta's type system works under the hood and how to leverage it for complex configurations.",["Date","2024-01-15T00:00:00.000Z"],[273,274,54],"types","internals","src/content/blog/test-type-system.md","e5966f60a08e53a1",{"html":143,"metadata":278},{"headings":279,"imagePaths":280,"frontmatter":281},[],[],{"title":269,"description":270,"date":282,"tags":283},["Date","2024-01-15T00:00:00.000Z"],[273,274,54],"test-type-system.md","test-security",{"id":285,"data":287,"filePath":293,"digest":294,"rendered":295,"legacyId":302},{"title":288,"description":289,"date":290,"tags":291},"Security Best Practices for Setta","Learn how to secure your Setta deployments, including authentication, authorization, and secure configuration storage.",["Date","2024-01-08T00:00:00.000Z"],[292,72,255],"security","src/content/blog/test-security.md","ca7176660d4f5727",{"html":143,"metadata":296},{"headings":297,"imagePaths":298,"frontmatter":299},[],[],{"title":288,"description":289,"date":300,"tags":301},["Date","2024-01-08T00:00:00.000Z"],[292,72,255],"test-security.md","test-debugging",{"id":303,"data":305,"filePath":313,"digest":314,"rendered":315,"legacyId":322},{"title":306,"description":307,"date":308,"tags":309},"Debugging Setta Applications","Tips and techniques for debugging Setta configurations and applications effectively.",["Date","2024-01-02T00:00:00.000Z"],[310,311,312],"debugging","development","troubleshooting","src/content/blog/test-debugging.md","24c9b48ff5ba0e43",{"html":143,"metadata":316},{"headings":317,"imagePaths":318,"frontmatter":319},[],[],{"title":306,"description":307,"date":320,"tags":321},["Date","2024-01-02T00:00:00.000Z"],[310,311,312],"test-debugging.md"]