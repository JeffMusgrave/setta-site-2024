---
import Layout from '../../../layouts/Layout.astro';
import Section from '../../../components/general/sections/Section.astro';
import { getCollection } from 'astro:content';
import type { GetStaticPaths, Page } from 'astro';
import type { CollectionEntry } from 'astro:content';
import { siteNarrowWidth } from '../../../styles/constants';
import BlogListTitle from '../../../components/pages/blog/BlogListTitle.astro';
import FeaturedImage from '../../../components/pages/blog/FeaturedImage.astro';
import BaseSEO from '../../../components/seo/BaseSEO.astro';
import Noise3 from '../../../components/general/Noise3.astro';

// Set to true if you want to show featured images in the blog list
const SHOW_FEATURED_IMAGES = true;

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection('blog', ({ data }) => {
    return !data.draft; // Filter out draft posts
  });
  
  // Get all unique tags from all posts
  const tags = [...new Set(posts.flatMap(post => post.data.tags || []))];
  
  // For each tag, create paginated routes
  return tags.flatMap(tag => {
    // Filter posts by tag
    const filteredPosts = posts.filter(post => 
      post.data.tags && post.data.tags.includes(tag)
    );
    
    // Sort by date, newest first
    const sortedPosts = filteredPosts.sort(
      (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
    );
    
    // Return paginated routes for this tag
    return paginate(sortedPosts, {
      params: { tag: tag.toLowerCase() },
      pageSize: 10,
      props: { tag }
    });
  });
}) satisfies GetStaticPaths;

interface Props {
  page: Page<CollectionEntry<'blog'>>;
  tag: string;
}

const { page, tag } = Astro.props;

// Format the tag for display (capitalize words)
const formattedTag = tag
  .split(' ')
  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
  .join(' ');

// Get the first post with a featured image to use for OG image, if available
const postWithImage = page.data.find(post => post.data.featuredImage || post.data.image);
const pageTitle = `${formattedTag} | Setta Blog`;
const pageDescription = `Articles about ${formattedTag.toLowerCase()} from the Setta team`;
---

<Layout>
    <BaseSEO 
      slot="SEO"
      title={pageTitle}
      description={pageDescription}
      type="website"
      image={postWithImage?.data.featuredImage 
        ? `/src/content/blog/${postWithImage.slug}/${postWithImage.data.featuredImage.src}`
        : postWithImage?.data.image}
    />

    <BlogListTitle>
      <h1 class="text-white text-4xl md:text-5xl lg:text-6xl mt-16 md:mt-32 mb-8">
        Category: {formattedTag}
      </h1>
      <a href="/blog" class="inline-block mt-4 text-blue-400 hover:text-blue-300">
        ← Back to all articles
      </a>
      <Noise3 slot="bg" />
    </BlogListTitle>
    
  <Section outerClass="relative pt-8 md:py-16 border-b border-setta-700 bg-setta-875" customSiteWidth={siteNarrowWidth}>
    <div class="flex flex-col gap-32">
      {page.data.length > 0 ? (
        page.data.map((post) => {
          // Get the slug for image resolution
          const slug = post.slug.includes('/index') 
            ? post.slug.replace('/index', '') 
            : post.slug;
            
          return (
            <a 
              class="group/blogpost flex flex-col md:flex-row-reverse md:gap-4 prose dark:prose-invert max-w-none border border-transparent rounded-xl md:hover:border-setta-800 md:hover:bg-setta-850/50 transition-all md:px-8 md:-mx-8"
              href={`/blog/${slug}`}
            >
              {/* Only show images if they're explicitly defined AND we want to show featured images */}
              {SHOW_FEATURED_IMAGES && (post.data.featuredImage || post.data.image) && (
                <FeaturedImage 
                  post={post}
                  class="w-full md:w-2/5"
                  sizes="(min-width: 1280px) 320px, (min-width: 768px) 240px, 100vw"
                />
              )}
              <div class="flex-1">
                <h2 class="mb-2 !mt-2 md:!mt-8 group-hover/blogpost:text-blue-500 transition-colors">
                  {post.data.title}
                </h2>
                <div class="flex flex-wrap items-center gap-x-4 gap-y-2 font-normal">
                  <time datetime={post.data.date.toISOString()} class="text-sm text-setta-400">
                    {post.data.date.toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </time>
                  
                  {/* Show author if available */}
                  {post.data.author && (
                    <span class="text-sm text-setta-400">
                      By {post.data.author}
                    </span>
                  )}
                  
                  {/* Show tags if available */}
                  {post.data.tags && post.data.tags.length > 0 ? (
                  <div class="flex flex-wrap gap-2">
                    {post.data.tags.map(tag => (
                      <span class="px-2 py-0.5 text-xs bg-setta-800 text-setta-300 rounded-full">
                        {tag}
                      </span>
                    ))}
                  </div>
                ):null}
                </div>
                <p class="mt-2 font-normal">{post.data.description}</p>
                <p class="text-setta-300 group-hover/blogpost:text-blue-500 transition-colors">Read more →</p>
              </div>
            </a>
          );
        })
      ) : (
        <div class="text-center py-16">
          <h2 class="text-2xl font-semibold mb-4">No articles found</h2>
          <p>There are no articles with the tag "{formattedTag}" yet.</p>
        </div>
      )}
    </div>

    {page.lastPage > 1 && (
      <nav class="flex items-center justify-between mt-8 pt-8" aria-label="Pagination">
        <div class="flex items-center gap-2">
          {page.url.prev && (
            <a href={page.url.prev} class="px-3 py-1 rounded-md text-sm font-medium text-blue-400 hover:text-blue-300 hover:bg-setta-800">
              ← Previous
            </a>
          )}
        </div>
        
        <div class="flex items-center gap-1">
          {Array.from({ length: page.lastPage }, (_, i) => i + 1).map((num) => (
            <a
              href={num === 1 ? `/category/${tag.toLowerCase()}` : `/category/${tag.toLowerCase()}/${num}`}
              class:list={[
                "px-3 py-1 rounded-full text-sm font-medium transition-colors hover:bg-blue-700",
                page.currentPage === num 
                  ? "bg-setta-700 text-white " 
                  : "text-setta-400"
              ]}
            >
              {num}
            </a>
          ))}
        </div>

        <div class="flex items-center gap-2">
          {page.url.next && (
            <a href={page.url.next} class="px-3 py-1 rounded-md text-sm font-medium text-blue-400 hover:text-blue-300 hover:bg-setta-800">
              Next →
            </a>
          )}
        </div>
      </nav>
    )}
  </Section>
</Layout>