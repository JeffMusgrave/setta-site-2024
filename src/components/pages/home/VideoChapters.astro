---
import Section from "../../sections/Section.astro";

import { siteWiderWidth } from "../../../styles/constants";


const videoSegments = [
  { id: 'segment1', start: 0, end: 24, text: 'Why Setta?' },
  { id: 'segment2', start: 24.5, end: 32.5, text: 'Quick Setup' },
  { id: 'segment3', start: 33.5, end: 71, text: 'Basic Guide' },
  { id: 'segment4', start: 72, end: 110, text: 'Power Features' },

];
---

<Section
  outerClass="relative py-0 md:py-16 bg-setta-875 border-b border-setta-700"
  proseClasses=""
  innerClass="flex flex-col [@media(min-width:800px)]:flex-row justify-center mx-auto gap-4"
  customSiteWidth={siteWiderWidth}
  id="setta-intro"
>
  <h2 class="block md:hidden text-4xl mt-16 z-10">Introducing Setta</h2>
  <div class="relative mt-0 md:my-auto lg:-mt-24 lg:-mb-24 [@media(min-width:800px)]:basis-2/3 overflow-clip rounded-2xl bg-setta-900 border border-setta-500/50 shadow-lg setta-video-aspect">
    <video
      class="absolute inset-0 w-full h-full z-10 object-cover"
      id="video-player"
      loop
      muted
      playsinline
      controls
      preload="auto"
    >
      <source src="assets/video/hero.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
  </div>
  
  <div class="flex-1 flex flex-col items-center md:items-start pb-8 sm:pb-12 md:py-0 pt-0 sm:pt-4 md:my-auto gap-4">
    <h2 class="hidden md:block font-semibold text-3xl px-3">Introducing Setta</h2>
    <div class="flex flex-col w-full">
      {
        videoSegments.map(segment => (
          <p
            id={segment.id}
            data-start={segment.start}
            data-end={segment.end}
            class="px-3 py-1 rounded-xl transition-colors duration-300 cursor-pointer hover:!bg-blue-700/50 text-setta-200 hover:!text-setta-50"
          >
            {segment.text}
          </p>
        ))
      }
    </div>
  </div>
</Section>

<style>
.setta-video-aspect {
    aspect-ratio: 1106 / 720;
}

@supports not (aspect-ratio) {
    .setta-video-aspect::before {
        float: left;
        padding-top: 65.1%;
        content: "";
    }

    .setta-video-aspect::after {
        display: block;
        content: "";
        clear: both;
    }
}
</style>

<script>
  function initializeVideoPlayer() {
  const video = document.getElementById('video-player') as HTMLVideoElement;
  const segments = document.querySelectorAll('p[id^="segment"]');

  if (!video) {
    console.error('Video element not found');
    return;
  }

  // Loading handling
  let attempts = 0;
  const maxAttempts = 3;
  let isLoaded = false;

  const handleError = (e) => {
    console.error('Video loading error:', e);
    if (attempts < maxAttempts) {
      attempts++;
      console.log(`Retrying video load, attempt ${attempts}`);
      setTimeout(() => {
        video.load();
      }, 1000 * attempts);
    }
  };

  video.addEventListener('error', handleError);
  
  video.addEventListener('loadeddata', () => {
    console.log('Video loaded successfully');
    isLoaded = true;
    video.removeEventListener('error', handleError);
  });

  // Create intersection observer - only handles play/pause based on visibility
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.intersectionRatio >= 0.75) {
        // Only attempt to play if the video has loaded
        if (isLoaded) {
          video.play().catch(console.error);
        }
      } else {
        video.pause();
      }
    });
  }, {
    threshold: 0.75
  });

  // Start observing for visibility
  observer.observe(video);

  // Handle segment clicks
  segments.forEach(segment => {
    segment.addEventListener('click', () => {
      const startTime = parseFloat(segment.getAttribute('data-start') || '0');
      video.currentTime = startTime;
      
      // Only play if the video is sufficiently visible AND loaded
      const rect = video.getBoundingClientRect();
      const isVisible = rect.top < window.innerHeight * 0.25;
      if (isVisible && isLoaded) {
        video.play().catch(console.error);
      }
    });
  });

  // Update segment highlighting
  function updateSegmentHighlight() {
    const time = video.currentTime;
    segments.forEach(segment => {
      segment.classList.remove('transcript-highlight');
    });

    const currentSegment = Array.from(segments).find(segment => {
      const start = parseFloat(segment.getAttribute('data-start') || '0');
      const end = parseFloat(segment.getAttribute('data-end') || '0');
      return time >= start && time < end;
    });

    if (currentSegment) {
      currentSegment.classList.add('transcript-highlight');
    }
  }

  video.addEventListener('timeupdate', updateSegmentHighlight);
}

// Initialize when the DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeVideoPlayer);
} else {
  initializeVideoPlayer();
}
</script>