---
import Section from "../../sections/Section.astro";
import MuteButton from "./MuteButton.astro";
import { Image } from "astro:assets";


const videoSegments = [
  { id: 'segment1', start: 0, end: 2.5, text: 'The bunny appears (0-2.5s)' },
  { id: 'segment2', start: 2.5, end: 5, text: 'Looking around (2.5-5s)' },
  { id: 'segment3', start: 5, end: 7.5, text: 'Observing nature (5-7.5s)' },
  { id: 'segment4', start: 7.5, end: 10, text: 'Final scene (7.5-10s)' }
];
---

<Section
  outerClass="py-0 md:py-16 bg-setta-900 md:bg-setta-875/80 shadow-2xl shadow-setta-950/50 border-b border-setta-700"
  proseClasses=""
  innerClass="flex md:flex-row justify-center mx-auto gap-4"
>
<div class="space-y-4">
  <h3 class="text-lg font-semibold px-3">Your Setta Workflow</h3>
  <div class="space-y-2 [&_p]:text-setta-500">
    {
      videoSegments.map(segment => (
        <p
          id={segment.id}
          data-start={segment.start}
          data-end={segment.end}
          class="px-3 py-1 rounded-xl transition-colors duration-300  cursor-pointer hover:!bg-setta-600 font-semibold"
        >
          {segment.text}
        </p>
      ))
    }
  </div>
</div>
  <div class="relative -mb-4 md:-mt-24 md:-mb-24 overflow-hidden bg-setta-900 rounded-2xl w-2/3 border border-setta-500/50 shadow-lg">
    <div class="relative w-full" style="padding-top: 63%"> <!-- 4:3 aspect ratio -->
      <Image 
        src="/assets/img/hero.png"
        alt="setta video placeholder" 
        width={1280} 
        height={960} 
        class="absolute inset-0 z-0 w-full h-full object-cover" 
      />
      <video
        class="absolute inset-0 w-full h-full object-cover z-10"
        id="video-player"
        autoplay
        loop
        muted
        playsinline
      >
        <source src="assets/video/hero.mp4" type="video/mp4">
        Your browser does not support the video tag.
      </video>
      <MuteButton />
    </div>
  </div>
  


</Section>


  

<script>
  function initializeVideoPlayer() {
    const video = document.getElementById('video-player') as HTMLVideoElement;
    const muteToggle = document.getElementById('mute-toggle');
    const mutedIcon = document.getElementById('muted-icon');
    const unmutedIcon = document.getElementById('unmuted-icon');
    const segments = document.querySelectorAll('p[id^="segment"]');

    if (!video || !muteToggle || !mutedIcon || !unmutedIcon) {
      console.error('Required elements not found');
      return;
    }

    // Handle mute toggle
    muteToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      video.muted = !video.muted;
      mutedIcon.classList.toggle('hidden');
      unmutedIcon.classList.toggle('hidden');
    });

    // Handle segment clicks
    segments.forEach(segment => {
      segment.addEventListener('click', () => {
        const startTime = parseFloat(segment.getAttribute('data-start') || '0');
        video.currentTime = startTime;
        video.play().catch(console.error);
      });
    });

    // Handle video click for play/pause
    video.addEventListener('click', () => {
      if (video.paused) {
        video.play().catch(console.error);
      } else {
        video.pause();
      }
    });

    // Update segment highlighting
    function updateSegmentHighlight() {
      const time = video.currentTime;
      
      // Remove existing highlights
      segments.forEach(segment => {
        segment.classList.remove('transcript-highlight');
      });

      // Find and highlight current segment
      const currentSegment = Array.from(segments).find(segment => {
        const start = parseFloat(segment.getAttribute('data-start') || '0');
        const end = parseFloat(segment.getAttribute('data-end') || '0');
        return time >= start && time <= end;
      });

      if (currentSegment) {
        currentSegment.classList.add('transcript-highlight');
      }
    }

    video.addEventListener('timeupdate', updateSegmentHighlight);
  }

  document.addEventListener('DOMContentLoaded', initializeVideoPlayer);
</script>
