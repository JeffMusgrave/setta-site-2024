---
import Section from "../../sections/Section.astro";
import { Image } from "astro:assets";
import { siteWiderWidth } from "../../../styles/constants";

const videoSegments = [
  { id: 'segment1', start: 0, end: 2.5, text: 'Create Your Project' },
  { id: 'segment2', start: 2.5, end: 5, text: 'Code Without The Boilerplate' },
  { id: 'segment3', start: 5, end: 7.5, text: 'Expose Your Functions As a Customizable UI' },
  { id: 'segment4', start: 7.5, end: 10, text: 'Interact With Your UI' },
  { id: 'segment5', start: 10, end: 15, text: 'Share With Ease' },
];
---

<Section
  outerClass="py-0 md:py-16 bg-setta-900 md:bg-setta-875/80 shadow-2xl shadow-setta-950/50 border-b border-setta-700"
  proseClasses=""
  innerClass="flex flex-col [@media(min-width:800px)]:flex-row justify-center mx-auto gap-4"
  customSiteWidth={siteWiderWidth}
>
  <h3 class="block md:hidden font-semibold text-center text-4xl mt-16 z-10">Your Setta Workflow</h3>
  <div class="relative mt-0 md:my-auto lg:-mt-24 lg:-mb-24 min-w-full [@media(min-width:800px)]:w-1/3 [@media(min-width:800px)]:flex-grow [@media(min-width:800px)]:min-w-fit">
    <div class="relative w-full h-full aspect-video overflow-clip rounded-2xl min-w-full bg-setta-900  border border-setta-500/50 shadow-lg"> 
      <Image 
        src="/assets/img/hero.png"
        alt="setta video placeholder" 
        width={1280} 
        height={960} 
        class="absolute inset-0 z-0 w-full h-full object-cover" 
      />
      <video
        class="absolute inset-0 w-full h-full object-cover md:object-cover z-10"
        id="video-player"
        loop
        muted
        playsinline
      >
        <source src="assets/video/hero.mp4" type="video/mp4">
        Your browser does not support the video tag.
      </video>
    </div>

    <!-- Video Controls -->
    <div class="absolute -bottom-10 left-0 right-0 w-full z-20 flex items-center gap-4">
      
        <button 
          id="play-pause-btn"
          class="text-white hover:text-blue-400 transition-colors"
        >
          <svg class="w-6 h-6" id="play-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <svg class="w-6 h-6 hidden" id="pause-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        </button>
        

        <input 
          type="range" 
          id="video-progress" 
          class="w-full h-1 flex-1 rounded-lg appearance-none cursor-pointer bg-setta-700/50"
          value="0"
          min="0"
          step="0.1"
        />

        
        <span id="time-display" class="text-white text-sm">0:00 / 0:00</span>
        
        <button 
          id="mute-btn"
          class="text-white hover:text-blue-400 transition-colors"
        >
          <svg class="w-6 h-6" id="volume-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
        </button>
      </div>


  </div>
  
  <div class="flex-1 flex flex-col items-center md:items-start pb-8 sm:pb-12 md:py-0 pt-0 sm:pt-4 md:my-auto gap-4">
    <h3 class="hidden md:block font-semibold text-3xl px-3">Your Setta Workflow</h3>
    <div class="flex flex-col [&_p]:text-setta-500 w-full">
      {
        videoSegments.map(segment => (
          <p
            id={segment.id}
            data-start={segment.start}
            data-end={segment.end}
            class="px-3 py-1 rounded-xl transition-colors duration-300 cursor-pointer hover:!bg-blue-700/50 hover:!text-setta-50"
          >
            {segment.text}
          </p>
        ))
      }
    </div>
  </div>
</Section>

<script>
  function formatTime(seconds: number): string {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  }

  function initializeVideoPlayer() {
    const video = document.getElementById('video-player') as HTMLVideoElement;
    const segments = document.querySelectorAll('p[id^="segment"]');
    const playPauseBtn = document.getElementById('play-pause-btn');
    const muteBtn = document.getElementById('mute-btn');
    const progressBar = document.getElementById('video-progress') as HTMLInputElement;
    const timeDisplay = document.getElementById('time-display');
    const playIcon = document.getElementById('play-icon');
    const pauseIcon = document.getElementById('pause-icon');

    if (!video || !playPauseBtn || !muteBtn || !progressBar || !timeDisplay || !playIcon || !pauseIcon) {
      console.error('Required elements not found');
      return;
    }

    // Initialize progress bar
    progressBar.max = String(video.duration || 0);

    // Play/Pause
    playPauseBtn.addEventListener('click', () => {
      if (video.paused) {
        video.play();
        playIcon.classList.add('hidden');
        pauseIcon.classList.remove('hidden');
      } else {
        video.pause();
        playIcon.classList.remove('hidden');
        pauseIcon.classList.add('hidden');
      }
    });

    // Mute toggle
    muteBtn.addEventListener('click', () => {
      video.muted = !video.muted;
      muteBtn.classList.toggle('text-blue-400', video.muted);
    });

    // Progress bar
    video.addEventListener('timeupdate', () => {
      progressBar.value = String(video.currentTime);
      timeDisplay.textContent = `${formatTime(video.currentTime)} / ${formatTime(video.duration)}`;
      updateSegmentHighlight();
    });

    // Seek functionality
    progressBar.addEventListener('input', () => {
      video.currentTime = parseFloat(progressBar.value);
    });

    // Handle segment clicks
    segments.forEach(segment => {
      segment.addEventListener('click', () => {
        const startTime = parseFloat(segment.getAttribute('data-start') || '0');
        video.currentTime = startTime;
        if (video.paused) {
          video.play().catch(console.error);
          playIcon.classList.add('hidden');
          pauseIcon.classList.remove('hidden');
        }
      });
    });

    // Update segment highlighting
    function updateSegmentHighlight() {
      segments.forEach(segment => {
        segment.classList.remove('transcript-highlight');
        const start = parseFloat(segment.getAttribute('data-start') || '0');
        const end = parseFloat(segment.getAttribute('data-end') || '0');
        if (video.currentTime >= start && video.currentTime < end) {
          segment.classList.add('transcript-highlight');
        }
      });
    }

    // Set initial duration once metadata is loaded
    video.addEventListener('loadedmetadata', () => {
      progressBar.max = String(video.duration);
      timeDisplay.textContent = `0:00 / ${formatTime(video.duration)}`;
    });
  }

  // Initialize when the DOM is ready
  document.addEventListener('DOMContentLoaded', initializeVideoPlayer);
</script>