---
import Section from "../../general/sections/Section.astro";
import { siteWiderWidth } from "../../../styles/constants";
import VideoPlayer from "./VideoPlayer.astro";

const videoSegments = [
  { id: 'segment1', start: 0, end: 24, text: 'Why Setta?' },
  { id: 'segment2', start: 24.5, end: 32.5, text: 'Quick Setup' },
  { id: 'segment3', start: 33.5, end: 71, text: 'Basic Guide' },
  { id: 'segment4', start: 72, end: 110, text: 'Power Features' },
];
---

<Section
  outerClass="relative py-0 md:py-16 bg-setta-875 border-b border-setta-700"
  proseClasses=""
  innerClass="flex flex-col [@media(min-width:800px)]:flex-row justify-center mx-auto gap-4"
  customSiteWidth={siteWiderWidth}
  id="setta-intro"
>
  <h2 class="block md:hidden text-4xl mt-16 z-10">Introducing Setta</h2>
  <div class="relative mt-0 md:my-auto lg:-mt-24 lg:-mb-24 [@media(min-width:800px)]:basis-2/3 overflow-clip rounded-2xl bg-setta-900 border border-setta-500/50 shadow-lg setta-video-aspect"
  >
    <VideoPlayer />
  </div>
  
  <div class="flex-1 flex flex-col items-center md:items-start pb-8 sm:pb-12 md:py-0 pt-0 sm:pt-4 md:my-auto gap-4">
    <h2 class="hidden md:block font-semibold text-3xl px-3">Introducing Setta</h2>
    <div class="flex flex-col w-full">
      {
        videoSegments.map(segment => (
          <p
            id={segment.id}
            data-start={segment.start}
            data-end={segment.end}
            class="px-3 py-1 rounded-xl transition-colors duration-300 cursor-pointer hover:!bg-blue-700/50 text-setta-200 hover:!text-setta-50"
          >
            {segment.text}
          </p>
        ))
      }
    </div>
  </div>
</Section>

<style>
.setta-video-aspect {
    aspect-ratio: 1106 / 720;
}

@supports not (aspect-ratio) {
    .setta-video-aspect::before {
        float: left;
        padding-top: 65.1%;
        content: "";
    }

    .setta-video-aspect::after {
        display: block;
        content: "";
        clear: both;
    }
}

.transcript-highlight {
    @apply bg-blue-700/30 text-setta-50;
}
</style>

<script>
let isVideoInitialized = false;

function initializeVideoPlayer() {
  if (isVideoInitialized) {
    console.log('Video already initialized, skipping');
    return;
  }

  const video = document.querySelector<HTMLVideoElement>('#video-player');
  if (!video) {
    console.error('Video element not found');
    return;
  }

  console.log('Initializing video player');
  isVideoInitialized = true;

  // Force muted state for autoplay
  video.muted = true;

  const attemptPlay = async () => {
    if (!video.paused) {
      console.log('Video is already playing');
      return;
    }

    try {
      console.log('Attempting to play video');
      await video.play();
      console.log('Video playing successfully');
    } catch (error) {
      console.error('Error playing video:', error);
      // If play fails, try again with a delay
      setTimeout(attemptPlay, 1000);
    }
  };

  // Handle loading events
  video.addEventListener('loadedmetadata', () => {
    console.log('Video metadata loaded');
    if (document.visibilityState === 'visible') {
      attemptPlay();
    }
  });

  video.addEventListener('loadeddata', () => {
    console.log('Video data loaded');
    if (document.visibilityState === 'visible') {
      attemptPlay();
    }
  });

  // Handle segments
  const segments = document.querySelectorAll<HTMLParagraphElement>('p[id^="segment"]');
  
  segments.forEach(segment => {
    segment.addEventListener('click', () => {
      const startTime = parseFloat(segment.dataset.start || '0');
      video.currentTime = startTime;
      attemptPlay();
    });
  });

  function updateSegmentHighlight() {
    const time = video.currentTime;
    segments.forEach(segment => {
      segment.classList.remove('transcript-highlight');
      
      const start = parseFloat(segment.dataset.start || '0');
      const end = parseFloat(segment.dataset.end || '0');
      
      if (time >= start && time < end) {
        segment.classList.add('transcript-highlight');
      }
    });
  }

  video.addEventListener('timeupdate', updateSegmentHighlight);
}

// Initialize on page load
document.addEventListener('astro:page-load', initializeVideoPlayer, { once: true });

// Also initialize on view transitions
document.addEventListener('astro:after-swap', initializeVideoPlayer);
</script>