---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

// Define a type for the imported images
type ImportedImage = { default: ImageMetadata };

// Import all images from the blog directory dynamically with proper typing
const images = import.meta.glob<ImportedImage>('/src/assets/img/blog/**/*.{png,jpg,jpeg,avif,webp,gif,svg}', { eager: true });

// This component is designed to be used in MDX content for optimized inline images
interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  caption?: string;
}

const { 
  src, 
  alt, 
  width, 
  height,
  class: className = '',
  caption
} = Astro.props;

// Extract filename from path or use the full path
const getImageInfo = () => {
  // If it's an external URL, just use it directly
  if (src.startsWith('http') || src.startsWith('/')) {
    return {
      src,
      isExternal: true,
      exists: true
    };
  }
  
  // For relative paths in blog content (just filename)
  const imagePath = `/src/assets/img/blog/${src}`;
  const imageModule = images[imagePath];
  
  if (imageModule) {
    return {
      src: imageModule.default,
      exists: true,
      isExternal: false,
      width: width || imageModule.default.width,
      height: height || imageModule.default.height
    };
  }
  
  // If not found, check if this is already a full path
  if (images[src]) {
    return {
      src: images[src].default,
      exists: true,
      isExternal: false,
      width: width || images[src].default.width,
      height: height || images[src].default.height
    };
  }
  
  // Image not found
  return {
    exists: false,
    src
  };
};

const imageInfo = getImageInfo();
---

<figure class={`blog-image my-8 ${className}`}>
  {imageInfo.exists ? (
    imageInfo.isExternal ? (
      <img 
        src={imageInfo.src as string} 
        alt={alt} 
        width={width} 
        height={height}
        loading="lazy"
        class="w-full h-auto rounded-md"
      />
    ) : (
      <Image 
        src={imageInfo.src as ImageMetadata} 
        alt={alt} 
        width={imageInfo.width || width || 800} 
        height={imageInfo.height || height || 600}
        class="w-full h-auto rounded-md"
      />
    )
  ) : (
    <div class="p-4 bg-red-900/30 border border-red-500 rounded-md text-red-200">
      <p class="font-bold">Image not found: {src}</p>
      <p class="text-sm mt-2">
        Make sure the image exists in src/assets/img/blog/ and is referenced with the correct filename.
      </p>
    </div>
  )}
  
  {caption && (
    <figcaption class="text-sm text-center text-setta-300 mt-2 italic">
      {caption}
    </figcaption>
  )}
</figure>