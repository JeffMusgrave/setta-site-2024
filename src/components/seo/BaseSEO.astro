---
import type { ImageMetadata } from "astro";

export interface Props {
  title: string;
  description: string;
  image?: string | ImageMetadata;
  type?: "website" | "article" | "page";
  canonical?: string;
  noindex?: boolean;
  publishDate?: Date;
  modifiedDate?: Date;
  author?: string;
  // Optional additional properties
  twitterHandle?: string;
  twitterCard?: "summary" | "summary_large_image";
  locale?: string;
}

const { 
  title, 
  description, 
  image, 
  type = "website", 
  canonical,
  noindex = false,
  publishDate,
  modifiedDate,
  author = "Setta Team",
  twitterHandle = "@settadev",
  twitterCard = "summary_large_image",
  locale = "en_US"
} = Astro.props;

// Base URL from environment or default to site URL
const baseUrl = import.meta.env.PUBLIC_BASE_URL || (Astro.site?.toString() || "https://setta.dev");

// Function to resolve image URL (handles string path, ImageMetadata, or undefined)
function resolveImageUrl(image: string | ImageMetadata | undefined): string {
  if (!image) {
    return `${baseUrl}/assets/img/og-image.jpg`; // Default fallback image
  }
  
  // If it's a string, make sure it's a full URL
  if (typeof image === 'string') {
    // If it's already a full URL, return it
    if (image.startsWith('http')) {
      return image;
    }
    // Otherwise, prepend the base URL
    return new URL(image, baseUrl).toString();
  }
  
  // For ImageMetadata, we need to access the processed URL
  // Note: In production, this may need to be adapted based on how Astro processes images
  return new URL(image.src, baseUrl).toString();
}

const imageUrl = resolveImageUrl(image);

// Canonical URL - use provided value or current page URL
const canonicalUrl = canonical ? new URL(canonical, baseUrl).toString() : new URL(Astro.url.pathname, baseUrl).toString();

// Build schema based on page type
let schema;

if (type === "website" || type === "page") {
  schema = {
    "@context": "https://schema.org",
    "@type": "WebPage",
    "@id": canonicalUrl,
    "url": canonicalUrl,
    "name": title,
    "description": description,
    "isPartOf": {
      "@type": "WebSite",
      "@id": `${baseUrl}/#website`,
      "name": "Setta",
      "description": "Python Without The Donkeywork",
      "url": baseUrl
    },
    "publisher": {
      "@type": "Organization",
      "@id": `${baseUrl}/#organization`,
      "name": "Setta",
      "logo": {
        "@type": "ImageObject",
        "url": `${baseUrl}/assets/img/og-image.jpg`
      }
    },
    "image": imageUrl,
    "inLanguage": "en-US"
  };
} else if (type === "article" && publishDate) {
  schema = {
    "@context": "https://schema.org",
    "@type": "Article",
    "@id": `${canonicalUrl}#article`,
    "headline": title,
    "description": description,
    "datePublished": publishDate.toISOString(),
    "dateModified": (modifiedDate || publishDate).toISOString(),
    "author": {
      "@type": "Person",
      "name": author
    },
    "publisher": {
      "@type": "Organization",
      "@id": `${baseUrl}/#organization`,
      "name": "Setta",
      "logo": {
        "@type": "ImageObject",
        "url": `${baseUrl}/assets/img/og-image.jpg`
      }
    },
    "image": imageUrl,
    "url": canonicalUrl,
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonicalUrl
    },
    "inLanguage": "en-US"
  };
}
---

<!-- Basic metadata -->
<title>{title}</title>
<meta name="description" content={description} />

<!-- Indexing and canonical -->
{noindex && <meta name="robots" content="noindex,nofollow" />}
<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph -->
<meta property="og:site_name" content="Setta" />
<meta property="og:locale" content={locale} />
<meta property="og:type" content={type} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:image" content={imageUrl} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />

<!-- Article specific OG tags -->
{type === "article" && publishDate && (
  <meta property="article:published_time" content={publishDate.toISOString()} />
)}
{type === "article" && modifiedDate && (
  <meta property="article:modified_time" content={modifiedDate.toISOString()} />
)}
{type === "article" && author && (
  <meta property="article:author" content={author} />
)}

<!-- Twitter -->
<meta name="twitter:card" content={twitterCard} />
<meta name="twitter:site" content={twitterHandle} />
<meta name="twitter:creator" content={twitterHandle} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />

<!-- Schema.org JSON-LD -->
{schema && <script type="application/ld+json" set:html={JSON.stringify(schema)} />}