---
import type { CollectionEntry } from 'astro:content';
import { getImage } from 'astro:assets';

interface Props {
  frontmatter: CollectionEntry<'blog'>['data'];
}

const { frontmatter } = Astro.props;
const baseUrl = import.meta.env.PUBLIC_BASE_URL || "https://setta.dev";

// Helper function to get the OG image URL
async function getOgImageUrl(frontmatter) {
  let ogImageUrl = `${baseUrl}/assets/img/og-image.jpg`; // Default fallback
  
  try {
    // If using new featuredImage schema
    if (frontmatter.featuredImage?.src) {
      // Try to find the image in content collection first
      try {
        // This path is for images in the content collection
        const contentImagePath = `/src/content/blog/getting-started-with-setta/${frontmatter.featuredImage.src}`;
        // Dynamic import for a specific file 
        const contentImage = await import(`/src/content/blog/getting-started-with-setta/${frontmatter.featuredImage.src}`);
        
        if (contentImage) {
          // Use getImage to optimize the image for OG
          const ogImage = await getImage({
            src: contentImage.default,
            width: 1200,
            height: 630,
            format: 'jpeg',
          });
          
          ogImageUrl = ogImage.src;
          return ogImageUrl;
        }
      } catch (contentError) {
        console.log("Image not found in content collection, trying assets folder");
      }
      
      // If not found in content collection, try assets folder
      try {
        // This is the path for images in the assets folder
        const imagePath = `/src/assets/img/blog/${frontmatter.featuredImage.src}`;
        
        // Use getImage to optimize the image for OG
        const ogImage = await getImage({
          src: imagePath,
          width: 1200,
          height: 630,
          format: 'jpeg',
        });
        
        ogImageUrl = ogImage.src;
      } catch (assetError) {
        console.error('Error loading image from assets:', assetError);
      }
    } 
    // If using legacy image string
    else if (frontmatter.image) {
      ogImageUrl = new URL(frontmatter.image, baseUrl).toString();
    }
  } catch (error) {
    console.error('Error generating OG image:', error);
  }
  
  return ogImageUrl;
}

const ogImageUrl = await getOgImageUrl(frontmatter);

const articleSchema = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "@id": `${baseUrl}${Astro.url.pathname}#article`,
  "headline": frontmatter.title,
  "description": frontmatter.description,
  "datePublished": frontmatter.date.toISOString(),
  "dateModified": (frontmatter.lastModified || frontmatter.date).toISOString(),
  "author": {
    "@type": "Organization",
    "name": "Setta",
    "url": baseUrl
  },
  "publisher": {
    "@type": "Organization",
    "@id": `${baseUrl}/#organization`,
    "name": "Setta",
    "url": baseUrl,
    "logo": {
      "@type": "ImageObject",
      "url": `${baseUrl}/assets/img/og-image.jpg`
    }
  },
  "image": {
    "@type": "ImageObject",
    "url": ogImageUrl
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": `${baseUrl}${Astro.url.pathname}`
  }
};
---
<>
  <title>{frontmatter.title} | Setta Blog</title>
  <meta name="description" content={frontmatter.description} />
  <meta name="keywords" content={frontmatter.tags?.join(', ')} />
  
  <!-- Open Graph -->
  <meta property="og:url" content={`${baseUrl}${Astro.url.pathname}`} />
  <meta property="og:type" content="article" />
  <meta property="og:title" content={frontmatter.title} />
  <meta property="og:description" content={frontmatter.description} />
  <meta property="og:image" content={ogImageUrl} />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  
  <!-- Twitter -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:site" content="@settadev" />
  <meta name="twitter:title" content={frontmatter.title} />
  <meta name="twitter:description" content={frontmatter.description} />
  <meta name="twitter:image" content={ogImageUrl} />
  
  <!-- Schema.org -->
  <script type="application/ld+json" set:html={JSON.stringify(articleSchema)} />
</>